(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    176635,       3603]
NotebookOptionsPosition[    167330,       3434]
NotebookOutlinePosition[    169102,       3473]
CellTagsIndexPosition[    169022,       3468]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 TogglerBox[2, {1->
  OverlayBox[{
   TagBox[GridBox[{
      {
       GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAKiEGSLED8//9/gvjRo0fsN27cELp69arY+fPnpZExPn137tzhBqrRBGJ/
ID4CxMfRMTZ9L168YL5w4YIaUD4AiC8C8Qcg/gvE/9AxFreC7PQD4gtA/BGq
7j8ujKz3+fPnLFC9b6H24dSHTf/FixfVofYSpRdZPzSsAqBuJkovsn5oOF8k
5F9s+h88eMBBjt0w/devXxcGso+S4m9k/ZcuXRKHpgeS3A7TD0wrkpToPw9J
ywOmn1L3Uxp+lMYfpemH0vRLjfwDjQey8y9a+fGOWDPwlF+gsPhEKDywlZ8g
d0D9EniexPITGd++fZv3PBnlN6764zxa3QHCAIDESDs=
         "], {{0, 26}, {16, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{16, 26},
        PlotRange->{{0, 16}, {0, 26}}], 
       GraphicsBox[RasterBox[CompressedData["
1:eJzt2V1vVFUUBuBGTfTSSygthYYKNHyVinrrpbcYfwBEJN5gUkyMfw9KKaVw
KCkQKCW1RNIQKg1gEE3QtdN10pMRZCaBzNQ+kzxt5nzstfeZfbPOu/vkD8e/
e6+vr+/sR/Hn+ImfvpyYOPHz1x/Hl2/OnP3+9JlT33515sdTp09NfHHy/TjY
H6592Nf3QfyvqmpHBwbCYNr5GoMNAw2d1AEAADa3/obtLba1aJ7rb4xR9x1D
YVfYHYbDnjASPgn7wv4wGg6Eg+FQOByOhLEwnj4Nx8Jn6fM21dcfyzHq8cay
xuGseTDnMJpz2pdzHMk5D+caduWa6v6p+czafU71s6p1+/cGAADYqt52/9va
++6tXt331j3v0TTeoj5e966v6lv3Vv/uWfWr9LJm9tzMpN+UW3eaVV9s00yY
CzfC7bAQFhvuhjt57maYD9er9c+VcDlcCtMd1AQAADafqXQhTabz6VyL+vhk
Xl/uLX1D6UFmw9VwrVrvL0o/cqta7ztKD3Iv/BLuh1/DSngYHoXfwlp4Ep6F
38Pz8Ed4Ef5Mf71Gff5F3vM8x3iWY65ljUdZcyXncD/ndC/neDvnfCPXcC3X
NJtrnG48r3afU/2s6uc11QO/OwAAwFbzLvrfksWVjK30kSV3KxncUlgOD6qN
vnc1PK42+t7iaaq/r+U1q9VG3/ogx1rKse9krfmsrV+l15R9WDLmkjWXzLl8
yvuVsmdLJl3eu5R9XN7BNLPrhTxX3seUvT3TQc2Xbfr7LWq3JgAAwH95m33K
u9Dt5wMAAMDmp2dlK+vGnu/2+yQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYPN42aZu
1AQAAAAAAICtrNsZIXRTN/b8xTbNhLlwI9wOC2Gx4W64k+duhvlwvVr/XAmX
w6Uw3UFNAAAAAAAA6EVT6UKaTOfTuRb18cm8vtxbcrOSwc2Gq9V6FlcytlvV
eu5WMrilsBwehJXwMKyGx2EtPElPU/19La9ZzXtWcozlHHMxa9zKmnM5h9mc
03Rjfe2uq15bvb6pHvid2NzKPiwZc8maS+ZcPiWDLnu2ZNIlmy77uGTVzex6
Ic+VbLvs7ZkOau7owEAYTDtfY7BhoKGTOgAAAAAAANDr+hu2t9jWonmuvzFG
nbsNhd1hOOwJI2Fv2B9Gw4FwMBwKR8JYOJrGW9THx/LaQ3nvgRxrf449krWG
s/ZQtZH3NdfY7rrqtdW6/fvw/9LMnpuZ9Jty646y6n8AhCP7tg==
         "], {{0, 26}, {2000, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{2000, 26},
        PlotRange->{{0, 2000}, {0, 26}}], 
       GraphicsBox[RasterBox[CompressedData["
1:eJy9lktLQkEUxyVdCBIELaxctYq+QduWbcKMPoCSRRsDC6JPp+Lj4vuq+EBc
iBtFfIYrpU7nPzQiN++9vmrgp/dx5j8z55w5c099z56HPYvF8mLnH4/37TIY
9L7fHvDNXeDl6THgv78KvPof/cELn5UfnjBHjI3J5/OudVBV9bhUKjmbzaad
iCxmcB9lAxKMmzmv1+v7JvpfG/DJjJkic8NrOut0OlYdfdoCjPXBqMx1q9Vy
7FhfgvX0MUa73bYZ6edyuTnrvPsZQ4Wv9PTRL5vNroTOGIiJu9FoOLT6UjuT
yVAqlaJkMin+0+m0YPEZbHTGQDwKyKtl+ugHjdFoRIVCgeLxOCUSCQGua7Ua
9Xo9YQNbozXI/aHVZ//RcDik2WxG5XKZwuGwANdo0JfrNIhDvFqtHi7zD+YW
i8VoMBgIvWKxKEDrdrtiHbAxiAF8pHAf5zJ9+Bca0WiUxuMxydbv98U64CvY
wNZgTyioI9r8QR/EEvrQUhRlrh8Kheb6sDHTZ1xG84ePMP/pdPpr/tvoL/of
Mcb9Jv7X+mcxP2X+QCMSiYh5VyoVMQbXMbP81I2vzM/JZCLyX+a+BPmPvbFN
fmr36pr713B/rVp7THy/tD6Y1cjF5zrahvVtB5jW5y21B/kVzpc1kecjfK53
Pu7kfNfO+x+/T/70++ob7NUEtQ==
         "], {{0, 26}, {24, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{24, 26},
        PlotRange->{{0, 24}, {0, 26}}]}
     },
     AutoDelete->False,
     GridBoxItemSize->{"Columns" -> {Automatic, 
         Scaled[0.6], Automatic}},
     GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
    "Grid"], 
   PaneBox[
    StyleBox[
     RowBox[{
     "Background", " ", "images", " ", "and", " ", "text", " ", "colors", " ",
       "have", " ", "been", " ", "adjusted", " ", "for", " ", "editing", " ", 
      
      RowBox[{"purposes", "."}]}],
     LineBreakWithin->False,
     FontFamily->"Helvetica",
     FontSize->12,
     FontColor->GrayLevel[0.4]],
    Alignment->Center,
    ImageSize->Scaled[0.5],
    ScrollPosition->{0., 0.}]},
   Alignment->{Center, Center}], 2->""}, "1"]], "SlideShowNavigationBar", \
"FirstSlide",
 CellMargins->{{0, 0}, {0, 0}},
 CellFrameLabelMargins->2,
 CellSize->{Inherited, 30},
 CellChangeTimes->{{3.923400095499432*^9, 3.923400097247583*^9}},
 TextAlignment->Center,
 CellTags->
  "SlideShowHeader",ExpressionUUID->"1d60e4e3-1a5d-46c6-b542-8fd6e709ef5d"],

Cell["Foraging", "Title",
 CellChangeTimes->{
  3.559948400406288*^9, {3.923399163955715*^9, 
   3.923399164914819*^9}},ExpressionUUID->"0f2d3db6-bf67-48c7-bebc-\
0736b66986b4"],

Cell["Bella, Yurika, Nancy", "Subtitle",
 CellChangeTimes->{{3.9233991691101513`*^9, 
  3.9233991978967543`*^9}},ExpressionUUID->"58db3571-3c89-412a-8665-\
fe0e0d6183dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"40efeee9-eba4-41d6-b979-fc61127aa250"],

Cell[CellGroupData[{

Cell["What Is Foraging?", "Section",
 CellChangeTimes->{{3.923399201264338*^9, 
  3.923399225923298*^9}},ExpressionUUID->"1a3eeec7-d27a-4164-adbb-\
892e90f8024d"],

Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJyk3Qe0hVdVLmwggYReIoHQQQgohF4DASkB6QIhBoEAoet/UUG4v6JXioB0
MDRFkZJAEkhoIQFF8QqKFURBpXcIKAoICqh4n7vff79jnrVPMhzjX2OcPb7z
7W+vb6053/XOueZqVz/hp+/7qAuc73zne8LBPu77sP95+8c//mE/f79L+ef+
j3vCYx/9uEc+4q6P+7lHPvqRj7/lCQe4+Sf/39//vT7nnHO+9KUvfeELX/j8
Jn1hk1x87nOf++xnP/uZz3zmU5/61Mc+9rG///u//9u//du//uu//su//Mu/
+Iu/+PM///Nc/Omf/ukf//Efv+997/vDP/zD97znPb/7u7/7rne96+yzzz7r
rLPesUlv3aS37KS3b9KZ2+T6rdvk2zPOOOP0vem000479dRTX//617/uda97
9atf/Vu/9VuvfOUrf2OTfv3Xf/3lL3/5S1/60hNPPPHX9qYXb9MLX/jC5z3v
ec95znOe/exn/+qv/uozn/nMZzzjGb/yK7/ytKc97SlPecov//IvP/nJT/6F
Tfr5n/95n/79pV/6pf+1Tb+8SZ586lOf+vSnP90Pn7FNspLhc5/73Be84AUv
etGLvFQxXvayl73iFa9Qwle96lWvfe1rTz75ZOVXC/VSu7dtkpr6VHeyIrR3
v/vdBPgHf/AH/3uTXPj393//9933rWciojdvU0T0pje96Y1vfOO+wlEAxXjJ
S16i+srW6kvP3SR3nv/8579gk164N7njK8/kJz7ntR+msnLOZ6tMHar8mte8
5stf/vIXv/jFAGlJwdUnP/lJuProRz/6d3/3dx/+8Ic/8IEPBFHF1R/90R8F
V0QRIUxckQbpEWakEWFORAVUkXNAVaElvWmbSO+UU06hI5r67d/+beUvuirD
JZ24SXSt+pFtcPWsZz0r0AKS4OoXf/EXC63gyp0FWsVV4JQkqwVX3qsw0P7/
H1e/93u/l6bqmYjxjJEinNM2iWTe8IY3nHTSSXTqpcFV2lrrrpDBVbARXCUV
XS/YpomrQPE521RcBVStcnBFKbAdsgqKkj6zTZ/+9KeR1Sc+8YmPbhLK+shH
PvJXf/VXhRbW+pM/+RO4eu8mkQY5/M7v/M7E1cJFrt1cvp24CqgWXGmS+Uyr
jPQUHroCrVCWqpHky0byb9AVyiKNUlaghXlABWYgB4omtIKrpkBr4upZ2yQ3
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
lHwSNo9OlxyCqDrSTd3Ia+LqzduFe7uTczpsNMs/Hbk6Y2/ZDhnPGs346tl7
V9C/Y7uz074cvvQHd5dPtpO4bJ8yowRRX/cBa3Byjtl174I5w/llm1WHE1fn
FmPfxVWjo5kW2EmDtYxzdsSL906MXyYwz1m+u2GHOcy3LFZdtNC+/JnbVZwz
ktk+V2/OXVzapSpZtV82uS6mELQmtzQadsrOPNjdiToLtJrJnBS0i71dZ+ys
7Y6su47cm8b89hqCOV28867n4E4DmzVhSzdw9vEX4trF1RxJnNNjagQbZp9O
e+YqL9uv5cmG4mscw10x0K/Y7nfXFQqdaLqEHWYwfMHV4q7vTmV5+1i5X5d7
LuVbFoe+c+9Q3a4BnV5Wfr74Nqdtl4fsTujad5nS7ELOiMfsj8wu5HTDdvuD
SY1cvXFsIzPnJi1zSDpLufu1ds7VMtj3krFjYf2xTjQtcc1xxkB0+lSxZfWs
uqy1S3WWafB5pk/u8ligFYNYG93Fnsuq5Dn9b06LOnVMUF9ip7PhT1xNMGCY
9+ykzvMslbXntZvKVx3HmT3TU3Zmn7YWxdVsIIXW6SP81WjYgqvZE1lGtGfc
9YyxC8GyVmVeN5Wy5j51yzjO0q8vZtoXq01ccCUFV8tsq+5F89S9aVlkkcnw
ubm4XkkzEFFoNbBWaLXbMtcvTAY7de8E9Tft3Vpkt0NXh+Sdm61s4mzP3Zg7
Qb1r23dXki6x7hlweOsIilaP03uZo5/Tn5+GfprFJQVX0wfrCGBqd+ZYZrg7
gjOxtO98pFP27i8dB34ZRG4cconJ54GXbvfyXSbbzIHChta7gGJuRDPX13c5
WGHWpYhZel8SC4MFWgmfFlrSy7Y7wM8daTrboWM9J+9dv9Amf9p2Pvxu1HTp
Er5r7xbfXZOV1P24FhIruiaVpT8Y/2pfPe47T74oWhzF2R/ZdRrftDOjfumu
Lh3JWZ5Tx+zcha92Fx28ZuxbXu99TnFJeKFjiMuUhvLYMsu0UfclsLBs0N2t
/AKtrD3sUtbsB9hV0l3Uk5h8WatTTONrzX7r7gDiMn1rGes5dSzhWaYuvHU7
Ae+snd1NISq4WvYL6ujMYh/3dfgDwjePzVtePxay7bv+IvMV52Sw/rv0cxuv
OA9cLQG6GXDoK9qDmACbjmtxpS2TfAJZS1Sz/tUcN5wP7M6lKcvNKGjnwwRU
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
R4+KMAmA/wOAcKqx
     "], {{0, 200}, {200, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{163.5, Automatic},
   ImageSizeRaw->{200, 200},
   PlotRange->{{0, 200}, {0, 200}}]],ExpressionUUID->
  "b29459d6-5e55-4430-ac5f-82209f084d17"],
 "\nForaging is searching for wild food resources. This behavior is \
instinctual for an animal\[CloseCurlyQuote]s survival. There exists a branch \
of behavioral ecology in which ecologists desire to explain how foraging \
animals make decisions. Within this, there exists an optimization problem \
(optimal foraging theory (OFT)) because while obtaining food is the means to \
provide an animal with energy, it requires both time and energy to capture \
and find that food. \n"
}], "Text",
 CellChangeTimes->{
  3.9233992353566103`*^9, {3.923399339938141*^9, 
   3.923399342877223*^9}},ExpressionUUID->"374fab62-bfa1-4ff2-b971-\
67fc88f696b9"],

Cell[CellGroupData[{

Cell["What Is The Goal Of Our Project?", "Subsection",
 CellChangeTimes->{{3.923399258557078*^9, 
  3.923399278590908*^9}},ExpressionUUID->"9cf538fb-af97-48fe-ad68-\
731bdf6978e1"],

Cell["\<\
We developed a cellular automaton that models the behaviors of foraging for \
animals. Our model is a field which contains a 2-dimensional array carrying \
information in the first dimension on what the occupant of the cell is and \
the second dimensional carries information regarding that particular cell\
\[CloseCurlyQuote]s distance from food.
At the simplest form of this model, the cell will only tell whether it is \
occupied by an animal, food, an obstacle, or nothing. The distance is our way \
of implementing a \[OpenCurlyDoubleQuote]expectation value\
\[CloseCurlyDoubleQuote], or the probability that there is food nearby, in \
this simplified model. Our hope is that our model will show us the optimal \
pathways in which an animal will forage for food based upon their \
expectations of food in that area.             \
\>", "Text",
 CellChangeTimes->{
  3.923399291508082*^9},ExpressionUUID->"0fff7276-9c35-4743-8cf9-\
ecea0a685647"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"255749bb-8145-4bd2-8657-b7f7267d9a15"],

Cell[CellGroupData[{

Cell["Process", "Subsection",
 CellChangeTimes->{
  3.923399629836224*^9},ExpressionUUID->"ea7f3496-12d7-4525-b71c-\
7b931d403c0e"],

Cell["\<\
In order to model foraging we have followed the processes below.\
\>", "Text",
 CellChangeTimes->{{3.923399668944202*^9, 
  3.92339967803526*^9}},ExpressionUUID->"07be8e18-f3ba-416f-aca9-\
e9274eddbb30"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["1. Set up the grid and place the animal, food, and \
obstacles.", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{
  3.923399702900141*^9},ExpressionUUID->"58364ef3-517c-4dae-8001-\
5fc0a949b546"],

Cell[TextData[{
 "We have decided to make each cell store two values: {type, the distance \
from the nearest food}. In making the cells store the second value,  we \
modified ",
 StyleBox["getUniverse[]",
  FontWeight->"Bold"],
 " to initialize a universe with {",
 StyleBox["numy",
  IgnoreSpellCheck->True],
 ", ",
 StyleBox["numx",
  IgnoreSpellCheck->True],
 ", ",
 StyleBox["numz",
  IgnoreSpellCheck->True,
  FontWeight->"Bold"],
 "} to match the dimension of foraging universe."
}], "Text",
 CellChangeTimes->{
  3.923399708534464*^9},ExpressionUUID->"da78f3c7-d333-4ee3-bb2d-\
adf8d9a62c05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["2. Calculate and update the distance between each \
cell and its nearest food.", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{{3.923399714542281*^9, 
  3.923399717724803*^9}},ExpressionUUID->"57d7f164-0fce-4036-a351-\
d4bed1d0a8f6"],

Cell[TextData[{
 "After we place food by clicking cells, the program will loop through each \
cell and updates its second value: the distance to its nearest food. In \
preparation for this step, ",
 StyleBox["updateFood[] ",
  FontWeight->"Bold"],
 "creates an array containing the coordinates of all food cells. \
Subsequently, ",
 StyleBox["updateDist[]",
  FontWeight->"Bold"],
 " loops through every cell in the universe and calculate the distance from \
the cell to each food cell in the food array and determine the shortest \
distance. By the end of this step, each cell\[CloseCurlyQuote]s second value \
is populated."
}], "Text",
 CellChangeTimes->{
  3.923399724192198*^9},ExpressionUUID->"5be8f890-d755-414c-9a74-\
8daf70b20426"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["3. Color the universe.", "Subsubsection"]], \
"Subsubsection",
 CellChangeTimes->{{3.923399714542281*^9, 
  3.923399739941936*^9}},ExpressionUUID->"b0e56dce-bb8e-46dd-9ed7-\
12c185bfff5a"],

Cell[TextData[{
 "Our modified  ",
 StyleBox["univplot[]",
  FontWeight->"Bold"],
 " colors each cell based on its type: animal, food, or obstacle. If the cell \
is empty, the coloring will consider how close the cell is from its nearest \
food. If the distance equals to or is smaller than 0, it will be colored with \
different shades of red. "
}], "Text",
 CellChangeTimes->{{3.923399724192198*^9, 
  3.923399744840108*^9}},ExpressionUUID->"3e56392e-b455-4d36-a051-\
b7576098482c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["4. Move the animal. ", "Subsubsection"]], \
"Subsubsection",
 CellChangeTimes->{{3.923399714542281*^9, 3.923399717724803*^9}, 
   3.923399753184802*^9, {3.923544065272258*^9, 
   3.923544065717805*^9}},ExpressionUUID->"140c70d7-74ca-41e1-a48a-\
aea22cac157f"],

Cell["\<\
We will move the animal by making it choose the cell that is closest to a \
food cell.   \
\>", "Text",
 CellChangeTimes->{{3.923399724192198*^9, 3.9233997499917727`*^9}, {
  3.923400426195272*^9, 
  3.92340042759682*^9}},ExpressionUUID->"be3f7ce4-6b1c-4743-951a-\
f0f930911715"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"cd52f003-0deb-43ea-9c10-f656f478e159"],

Cell[CellGroupData[{

Cell["Rules:", "Section",
 CellChangeTimes->{{3.92339991388163*^9, 
  3.923399915587456*^9}},ExpressionUUID->"7488fecd-92a0-49f6-8929-\
b5f1d794dd63"],

Cell[TextData[StyleBox["1. If any neighbor cell is food (ie dst=0), deplete \
food value by 1. (this is an optional further implimentation rule.)\n\n2. If \
none of your neighbors are food, move into the cell with the lowest distance \
value. \n\n\t2a.For obstacle: if neighbor distance is the smallest in second \
dimension and NOT obstacle value in its first dimension, then you can move \
there. \nElse, you will have to choose the next lowest minimum value. \n\n3. \
For a path (advanced application): Cells don\[CloseCurlyQuote]t live forever, \
we want them to die after one life length if they were an animal, so if the \
cell contains an animal and exceeds life length of cycle 1 set the value \
(with new color rule for this) to 1.5 or something so its a lighter gradient \
of the color for the animal path since it is not an animal anymore. ",
 FontSize->18]], "Text",
 CellChangeTimes->{{3.923399930349184*^9, 3.923399957815295*^9}, {
  3.923574111908853*^9, 
  3.923574204435141*^9}},ExpressionUUID->"21773ef2-cada-41d2-a095-\
6ae00524d3df"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"neighCoords", "[", 
     RowBox[{"i_", ",", "j_"}], "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "-", "1"}], ",", " ", "j"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "+", "1"}], ",", "j"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", 
        RowBox[{"j", "-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", 
        RowBox[{"j", "+", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "+", "1"}], ",", " ", 
        RowBox[{"j", "+", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "-", "1"}], ",", " ", 
        RowBox[{"j", "+", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "+", "1"}], ",", " ", 
        RowBox[{"j", "-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "-", "1"}], ",", " ", 
        RowBox[{"j", "-", "1"}]}], "}"}]}], " ", "}"}]}], 
   "\[IndentingNewLine]"}],
  FontSize->18], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"findNext", "[", 
     RowBox[{"i_", ",", "j_", ",", " ", "univ_"}], "]"}], " ", ":=", " ", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"neighbors", "=", " ", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"neighCoords", "[", 
         RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"minIndex", " ", "=", " ", "Null"}], ";", "\[IndentingNewLine]", 
      RowBox[{"minDistance", " ", "=", " ", "Null"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"n", "=", "1"}], ",", " ", 
        RowBox[{"n", " ", "<=", " ", 
         RowBox[{"Length", "[", "neighbors", "]"}]}], ",", 
        RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"univ", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"neighbors", "[", 
                 RowBox[{"[", 
                  RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
                RowBox[{"neighbors", "[", 
                 RowBox[{"[", 
                  RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "1"}], "]"}], 
              "]"}], "<", " ", "2"}], " ", "&&", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"minDistance", " ", ">", 
               RowBox[{"univ", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"neighbors", "[", 
                   RowBox[{"[", 
                    RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
                  RowBox[{"neighbors", "[", 
                   RowBox[{"[", 
                    RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "2"}], "]"}], 
                "]"}]}], "||", " ", 
              RowBox[{"TrueQ", "[", 
               RowBox[{"minDistance", " ", "==", " ", "Null"}], "]"}]}], 
             ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"minIndex", " ", "=", " ", "n"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"minDistance", " ", "=", " ", 
             RowBox[{"univ", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"neighbors", "[", 
                 RowBox[{"[", 
                  RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
                RowBox[{"neighbors", "[", 
                 RowBox[{"[", 
                  RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "2"}], "]"}], 
              "]"}]}]}], ",", "\[IndentingNewLine]", "Null"}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ", 
         "debugging"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<[minDist loop] index: \>\"", ",", " ", "n", ",", " ", 
           "\"\< dist: \>\"", ",", 
           RowBox[{"univ", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"neighbors", "[", 
               RowBox[{"[", 
                RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"neighbors", "[", 
               RowBox[{"[", 
                RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "2"}], "]"}], 
            "]"}]}], " ", "]"}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"neighbors", "[", 
        RowBox[{"[", "minIndex", "]"}], "]"}], "]"}]}], "\[IndentingNewLine]",
      ")"}]}], "\[IndentingNewLine]"}],
  FontSize->18], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{"foraging", "[", "univ_", "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newUniv", " ", "=", " ", 
      RowBox[{"setupUniverse", "[", "univ", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"c", "=", "1"}], ",", " ", 
       RowBox[{"c", " ", "<=", " ", 
        RowBox[{"Length", "[", "ANIMALS", "]"}]}], ",", 
       RowBox[{"c", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nextCoord", " ", "=", " ", 
         RowBox[{"findNext", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ANIMALS", "[", 
             RowBox[{"[", "c", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"ANIMALS", "[", 
             RowBox[{"[", "c", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", " ", "newUniv"}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "set", " ", "the", " ", "next", " ", "cell", " ", "type", " ", "to", 
          " ", "animal"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newUniv", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"nextCoord", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"nextCoord", "[", 
             RowBox[{"[", "2", "]"}], "]"}], " ", ",", " ", "1"}], "]"}], 
          "]"}], " ", "=", " ", "2"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ", 
          "debugging"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<[animal loop] count: \>\"", ",", " ", "c", ",", " ", 
            "\"\< dist: \>\"", ",", 
            RowBox[{"nextCoord", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"nextCoord", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", 
            RowBox[{"newUniv", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"nextCoord", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"nextCoord", "[", 
                RowBox[{"[", "2", "]"}], "]"}], " ", ",", " ", "1"}], "]"}], 
             "]"}]}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "set", " ", "the", " ", "current", " ", "cell", " ", "type", " ", 
          "to", " ", "empty"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newUniv", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{
             RowBox[{"ANIMALS", "[", 
              RowBox[{"[", "c", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"ANIMALS", "[", 
              RowBox[{"[", "c", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], "]"}], " ", 
         "=", " ", "0"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "newUniv", "]"}]}], "\[IndentingNewLine]", ")"}]}],
  FontSize->18], "\n"
 StyleBox[,
  FontSize->18]}], "Code",
 CellChangeTimes->{3.923399843509983*^9, 
  3.923574091974513*^9},ExpressionUUID->"c378db50-258d-4d0c-b73e-\
f676e34ad1de"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"06dc16af-fae6-44a2-a8a4-c8439072d273"],

Cell[CellGroupData[{

Cell["Functions", "Subsection",
 CellChangeTimes->{3.923399629836224*^9, 
  3.923399942191203*^9},ExpressionUUID->"05aca6fb-8928-47d8-99d9-\
183644e293f0"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["updateFood[]:", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{
  3.923399702900141*^9, {3.923399952316249*^9, 
   3.923399955924094*^9}},ExpressionUUID->"cc63aa00-54f1-4095-8e69-\
917822232ccd"],

Cell[TextData[{
 "This function takes a universe as its parameter. With the nested for-loop, \
the function looping through every cell in the universe and checks if it is a \
food cell. When it finds a food cell, it appends the coordinates of the food \
cell to ",
 StyleBox["foodArr",
  FontWeight->"Bold"],
 ", the array with all the food cell coordinates to be returned. "
}], "Text",
 CellChangeTimes->{3.923399708534464*^9, 
  3.923399960706401*^9},ExpressionUUID->"a02ac066-fa44-4d2b-ad69-\
ff42dbbf8900"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"populate", " ", "foodArr"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"updateFood", "[", "univ_", "]"}], " ", ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "array", " ", "storing", "  ", "the", " ", "coordinates", " ", "of", " ",
       "all", " ", "food", " ", "cell"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"foodArr", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "loop", " ", "through", " ", "each", " ", "cell", " ", "in", " ", 
       "univ"}], "*)"}], "\[IndentingNewLine]", " ", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", " ", 
       RowBox[{"i", "<=", "UNIVSIZE"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", " ", 
         RowBox[{"j", "<=", "UNIVSIZE"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "add", " ", "the", " ", "coordinate", " ", "of", " ", "the", " ", 
           "current", " ", "cell", " ", "to", " ", "foodArr", " ", "if", " ", 
           "it", " ", "is", " ", "a", " ", "food", " ", "cell"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"univ", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "j", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "==", "1"}], ",", 
            RowBox[{"foodArr", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"foodArr", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "j"}], "}"}]}], " ", "]"}]}], " ", ",", 
            "foodArr"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "foodArr", "]"}]}], "\[IndentingNewLine]", 
    ")"}]}]}]], "Input",
 CellChangeTimes->{{3.923342345355368*^9, 3.923342345772569*^9}},
 Background->RGBColor[
  0.94, 0.91, 0.88],ExpressionUUID->"61731704-3e71-4657-8c60-b095170c2606"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["updateDist[]:", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{{3.923399714542281*^9, 3.923399717724803*^9}, 
   3.923399967310783*^9},ExpressionUUID->"5b8f605e-131f-4de0-8245-\
bded0c4c84a6"],

Cell[TextData[{
 "This function takes a universe and an array of food cell coordinates as its \
parameters. With the nested for-loop, the function looping through every cell \
in the universe and calculates the distance to each existing food cell using \
the following formula: ",
 StyleBox["|x2-x1|+|y2-y1|",
  FontWeight->"Bold"],
 ". As ",
 StyleBox["minDist",
  FontWeight->"Bold"],
 ", a variable storing the cell\[CloseCurlyQuote]s shortest distance to food, \
is updated every time the distance calculation yields a smaller value, \
minDist stores a given cell\[CloseCurlyQuote]s distance to its nearest food \
by the end of the loop. The function updates the cell\[CloseCurlyQuote]s \
second element with minDist and returns the updated universe named ",
 StyleBox["newUniv",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{3.923399724192198*^9, 
  3.923399971582624*^9},ExpressionUUID->"ac5b5c43-99d8-4d0d-be4a-\
367f5befc775"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "calculate", " ", "the", " ", "shortest", " ", "distance", " ", "between", 
    " ", "each", " ", "cell", " ", "in", " ", "univ", " ", "to", " ", "its", 
    " ", "nereast", " ", "food"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"updateDist", "[", 
    RowBox[{"univ_", ",", " ", "foodArr_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"updated", " ", "univ", " ", "to", " ", "be", " ", "returned"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newUniv", " ", "=", " ", "univ"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "loop", " ", "through", " ", "each", " ", "cell", " ", "in", " ", 
       "univ"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", " ", 
       RowBox[{"i", "<=", "UNIVSIZE"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", " ", 
         RowBox[{"j", "<=", "UNIVSIZE"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "the", " ", "shortest", " ", "distance", " ", "to", " ", "its", " ",
            "nearest", " ", "food"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"minDist", " ", "=", " ", "Null"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "loop", " ", "each", " ", "food", " ", "cell", " ", "and", " ", 
            "calculate", " ", "the", " ", "distance", " ", "between", " ", 
            "the", " ", "current", " ", "cell", " ", "and", " ", "the", " ", 
            "food"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"n", "=", "1"}], ",", " ", 
            RowBox[{"n", " ", "<=", " ", 
             RowBox[{"Length", "[", "foodArr", "]"}]}], ",", 
            RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "temporarily", " ", "store", " ", "the", " ", "distant", " ", 
              "between", " ", "the", " ", "current", " ", "cell", " ", "and", 
              " ", "a", " ", "given", " ", "food"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"temp", " ", "=", " ", 
              RowBox[{
               RowBox[{"Abs", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"foodArr", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "-", "i"}], "]"}], "+", 
               RowBox[{"Abs", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"foodArr", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "-", "j"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "update", " ", "minDist", " ", "if", " ", "temp", " ", "is", 
               " ", "smaller", " ", "than", " ", "the", " ", "current", " ", 
               "minDist"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", " ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"minDist", " ", ">", " ", "temp"}], " ", "||", 
                RowBox[{"minDist", "==", "Null"}]}], ",", 
               RowBox[{"minDist", " ", "=", " ", "temp"}], ",", " ", 
               "minDist"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", 
             " ", "debugging"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<the distant between [FOOD] \>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"foodArr", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"foodArr", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", " ", 
              "\"\< and [CURRENT CELL] \>\"", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}], ",", "\"\< is: \>\"", ",", " ",
               "temp"}], "]"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "set", " ", "the", " ", "second", " ", "element", " ", "to", " ", 
            "minDist"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"newUniv", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", "minDist"}], 
          ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ", 
          "debugging"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<the distance to the nerest food from \>\"", ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], ",", " ", "\"\< is: \>\"", ",", 
            "minDist"}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}]}],
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "newUniv", "]"}]}], "\[IndentingNewLine]", 
    ")"}]}]}]], "Input",
 CellChangeTimes->{3.923342302783887*^9, 3.923342358800279*^9},
 Background->RGBColor[
  0.94, 0.91, 0.88],ExpressionUUID->"d62a594f-3e90-4bc6-a560-cbfd30872239"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["setupUniverse[]:", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{{3.923399714542281*^9, 3.923399739941936*^9}, 
   3.923399977256661*^9},ExpressionUUID->"0d024e23-eaf1-45b2-b176-\
f59827e1a875"],

Cell[TextData[{
 "This function wraps function calls to ",
 StyleBox["updateFood[]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["updateDist[]",
  FontWeight->"Bold"],
 " for easier set-up of the foraging universe."
}], "Text",
 CellChangeTimes->{{3.923399724192198*^9, 3.923399744840108*^9}, 
   3.923399981627339*^9},ExpressionUUID->"542a0042-b24c-4923-935e-\
d7f79927aebb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "populate", " ", "the", " ", "second", " ", "element", " ", "of", " ", 
    "each", " ", "cell", " ", "in", " ", "univ", " ", "and", " ", "complete", 
    " ", "the", " ", "setup", " ", "of", " ", "a", " ", "universe"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"setupUniverse", "[", "univ_", "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"foodArr", " ", "=", " ", 
      RowBox[{"updateFood", "[", "univ", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"newUniv", " ", "=", " ", 
      RowBox[{"updateDist", "[", 
       RowBox[{"univ", ",", " ", "foodArr"}], "]"}]}], " ", ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "newUniv", "]"}], ";"}], "\[IndentingNewLine]", 
    ")"}]}]}]], "Input",
 Background->RGBColor[
  0.94, 0.91, 0.88],ExpressionUUID->"1578f9f8-e991-413d-b197-583866d59dc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["UNIVSIZE:", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{{3.923399714542281*^9, 3.923399717724803*^9}, 
   3.923399753184802*^9, 
   3.923399986156397*^9},ExpressionUUID->"c8aec094-7dac-45cc-8b98-\
0e2cfd1d2f0a"],

Cell[TextData[{
 "We have made ",
 StyleBox["UNIVSIZE",
  FontWeight->"Bold"],
 " a global variable for easier debugging."
}], "Text",
 CellChangeTimes->{{3.923399724192198*^9, 3.9233997499917727`*^9}, 
   3.923399991140251*^9},ExpressionUUID->"78a10ab0-bc4b-41d6-9986-\
58098e05c80a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"8b577f2d-f8b5-47ec-8921-1722b1cce606"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Some Advanced Applications",
 FontSize->36,
 FontColor->RGBColor[
  0.07058823529411765, 0.5248645761806668, 0.7484550240329595]]], "Subsection",\

 CellChangeTimes->{3.923399629836224*^9, 3.923399942191203*^9, 
  3.923400503935708*^9},ExpressionUUID->"6c915c2a-c232-4e3e-9ff3-\
92312c4ae203"],

Cell["\<\
We would consider it possible to create a field with numerous dimensions to \
store more information about the path, home, health, and age of the animals, \
food sources, etc. within the model.\
\>", "Text",
 CellChangeTimes->{
  3.923400547067211*^9},ExpressionUUID->"d503f6bb-0eab-4d09-8c43-\
a25e9bfe0f4e"],

Cell["\<\
1.\tAt this point, by adding another dimension for a path , we could color \
our map based upon if an animal had occupied a square. A \
\[OpenCurlyDoubleQuote]which\[CloseCurlyDoubleQuote] rule could specify by \
checking if that dimension is non-0 number, change dimension 1 value to be \
this so it colors a path. \
\>", "Text",
 CellChangeTimes->{
  3.9234005559874268`*^9},ExpressionUUID->"13c433e7-f4ab-4278-81f1-\
db3de2d50bc5"],

Cell["\<\
2.\tBy adding a value for a home, you could then retrace your path checking \
if that value is your home and then return to it. \
\>", "Text",
 CellChangeTimes->{
  3.92340056540598*^9},ExpressionUUID->"634fc050-2a70-4157-bfbc-c5289f546884"],

Cell["\<\
3.\tAt some point, the animal will have consumed enough food that it could \
replicate. You could set a rule with an age limit, then check if that is \
reached at any point and then duplicate your animal when it reaches that age\
\[LongDash]this would allow for us to simulate reproduction within foraging \
theory as the survival would depend on its ability to find food. \
\>", "Text",
 CellChangeTimes->{
  3.9234005735749207`*^9},ExpressionUUID->"a029ef66-48d1-48bc-ab37-\
9ba5eb36c74d"],

Cell["\<\
4.\tWe also said you could add other animals onto the grid. For example, you \
could have you original food source be a plant for the animal (a rabbit to \
consume), a rabbit can only move one square at a time. Consider adding a fox \
onto the board, which is a predator for rabbits. This animal could more two \
squares at a time, so it could effectively hunt the rabbit. It could follow \
the rabbit\[CloseCurlyQuote]s \[OpenCurlyDoubleQuote]path\
\[CloseCurlyDoubleQuote] until it eventually catches up to it. If caught the \
rabbit would die off. \
\>", "Text",
 CellChangeTimes->{
  3.923400578948854*^9},ExpressionUUID->"5fb8dde1-1cd8-49d8-ab64-\
662837750119"],

Cell["\<\
5.\tYou could introduce elements of randomness, as obviously animals will not \
always choose the optimal route, so at some point you would not pick the \
smallest distance value. \
\>", "Text",
 CellChangeTimes->{
  3.923400585399111*^9},ExpressionUUID->"6499baba-cef8-42fa-b2a6-\
8b7c834266f3"],

Cell["\<\
6.\tYou could also have not every square have a distance value, only some \
within a certain radius of the food. This would ensure that when an animal is \
not in that radius their choice is randomized about where they go. \
\>", "Text",
 CellChangeTimes->{
  3.923400591754252*^9},ExpressionUUID->"c734faee-d6a2-439b-8521-\
aaeb295e0684"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"c25bcb14-bab6-4113-97c1-3ad380d2a6c3"],

Cell[TextData[StyleBox["Code",
 FontSize->36,
 FontColor->RGBColor[
  0.07058823529411765, 0.5248645761806668, 0.7484550240329595]]], "Section",
 CellChangeTimes->{
  3.923399629836224*^9, 3.923399942191203*^9, 3.923400503935708*^9, {
   3.92355879998453*^9, 
   3.9235588004867077`*^9}},ExpressionUUID->"71689412-b40c-45c0-896a-\
619e63bbf5e8"],

Cell[CellGroupData[{

Cell["Initialization:", "Section",
 CellChangeTimes->{{3.9228019361190767`*^9, 3.922801936787261*^9}, {
   3.922801973081787*^9, 3.922801978043605*^9}, {3.923327494460265*^9, 
   3.923327498656011*^9}, 
   3.923327534177549*^9},ExpressionUUID->"1db70143-f3d2-40cb-8c12-\
bfe9f726754a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"GRAPHICS", " ", "INTERFACE"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Maximum", " ", "size", " ", "of", " ", "the", " ", 
     RowBox[{"universe", "'"}], "s", " ", "picture"}], ",", " ", 
    RowBox[{"in", " ", "pixels"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"IMAGESIZE", " ", "=", " ", "300"}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "assigns", " ", "a", " ", "value", " ", "of", " ", "1", " ", "to", " ", 
      "a", " ", "live", " ", "cell"}], ",", " ", 
     RowBox[{"0", " ", "to", " ", "a", " ", "dead", " ", "cell"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NOPLANT", " ", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PLANT1", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plant2", " ", "=", "2"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"size", " ", "of", " ", "the", " ", "universe"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"UNIVSIZE", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"colors", " ", "for", " ", "food", " ", "odor"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"COLORDIST1", " ", "=", 
     RowBox[{"Opacity", "[", 
      RowBox[{"0.3", ",", "Red"}], "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"COLORDIST2", " ", "=", 
     RowBox[{"Opacity", "[", 
      RowBox[{"0.2", ",", "Red"}], "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"COLORDIST3", " ", "=", 
     RowBox[{"Opacity", "[", 
      RowBox[{"0.1", ",", "Red"}], "]"}]}], ";"}], "  ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "array", " ", "of", " ", "animal", " ", "cell", " ", "coordinates"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ANIMALS", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "assign", " ", "a", " ", "colorcode", " ", "to", " ", "empty", " ", 
     "cells"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"colorDist", "[", "dist_", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"colorCode", " ", "=", " ", "Null"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"set", " ", "the", " ", "empty", " ", 
         RowBox[{"cell", "'"}], "s", " ", "color", " ", "to", " ", "non"}], 
        "-", 
        RowBox[{
        "zero", " ", "if", " ", "it", " ", "is", " ", "close", " ", "enough", 
         " ", "to", " ", "food", " ", 
         RowBox[{"(", 
          RowBox[{"distance", " ", "<=", " ", "3"}], ")"}]}]}], "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"dist", " ", ">", " ", "0"}], " ", "&&", " ", 
         RowBox[{"dist", "<=", "3"}], " ", "&&", " ", 
         RowBox[{"!", 
          RowBox[{"TrueQ", "[", 
           RowBox[{"dist", "==", "Null"}], "]"}]}]}], ",", " ", 
        RowBox[{"colorCode", "=", 
         RowBox[{"-", "dist"}]}], ",", " ", 
        RowBox[{"colorCode", "=", "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{
       "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ", 
        "debugging"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<distance: \>\"", ",", "dist", ",", " ", "\"\< colorCode: \>\"", 
          ",", " ", "colorCode"}], "]"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "colorCode", "]"}]}], "\[IndentingNewLine]", 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"draw", " ", "grids"}], "*)"}], "\[IndentingNewLine]", " ", 
   RowBox[{
    RowBox[{"univplot", "[", "univ_", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "uncomment", " ", "the", " ", "code", " ", "below", " ", "to", " ", 
       "color", " ", "cells", " ", "based", " ", "only", " ", "on", " ", 
       "its", " ", "type"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"items", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"univ", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "j", ",", "1"}], "]"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "UNIVSIZE"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "UNIVSIZE"}], "}"}]}], "]"}]}], ";"}], 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "uncomment", " ", "the", " ", "code", " ", "section", " ", "below", " ",
        "to", " ", "color", " ", "cells", " ", "based", " ", "only", " ", 
       "on", " ", "its", " ", "type", " ", "and", " ", "the", " ", "distance",
        " ", "to", " ", "its", " ", "nearest", " ", "food"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"items", " ", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "UNIVSIZE"}], "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "store", " ", "color", " ", "codes", " ", "for", " ", "all", " ", 
        "cells", " ", "in", " ", "univ"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"loop", " ", "through", " ", "each", " ", "cell"}], "*)"}], 
      "\[IndentingNewLine]", " ", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", " ", 
        RowBox[{"i", "<=", "UNIVSIZE"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"row", " ", "=", " ", 
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "UNIVSIZE"}], "}"}]}], "]"}]}], ";", "  ", 
         RowBox[{"(*", 
          RowBox[{
          "store", " ", "color", " ", "codes", " ", "for", " ", "all", " ", 
           "cells", " ", "in", " ", "a", " ", "row"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"j", "=", "1"}], ",", " ", 
           RowBox[{"j", "<=", "UNIVSIZE"}], ",", 
           RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
             "if", " ", "the", " ", "cell", " ", "is", " ", "not", " ", 
              "empty"}], ",", " ", 
             RowBox[{
             "color", " ", "it", " ", "based", " ", "on", " ", "its", " ", 
              RowBox[{"type", ".", " ", "otherwise"}]}], ",", " ", 
             RowBox[{
             "color", " ", "it", " ", "based", " ", "on", " ", "the", " ", 
              "distance", " ", "to", " ", "its", " ", "nearest", " ", 
              "food"}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"univ", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", "j", ",", "1"}], "]"}], "]"}], "!=", "0"}], 
             ",", 
             RowBox[{
              RowBox[{"row", "[", 
               RowBox[{"[", "j", "]"}], "]"}], "=", 
              RowBox[{"univ", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", "j", ",", "1"}], "]"}], "]"}]}], " ", ",", 
             RowBox[{
              RowBox[{"row", "[", 
               RowBox[{"[", "j", "]"}], "]"}], " ", "=", " ", 
              RowBox[{"colorDist", "[", 
               RowBox[{"univ", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "j", ",", "2"}], "]"}], "]"}], "]"}]}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"items", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "=", "row"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"ArrayPlot", "[", 
       RowBox[{"items", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "True"}], ",", " ", 
        RowBox[{"ColorRules", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[Rule]", " ", "Brown"}], ",", " ", 
           RowBox[{"0", "\[Rule]", " ", "White"}], ",", " ", 
           RowBox[{"1", " ", "\[Rule]", " ", "Red"}], ",", " ", 
           RowBox[{"3", " ", "\[Rule]", " ", "Black"}], ",", " ", 
           RowBox[{
            RowBox[{"-", "1"}], " ", "->", " ", "COLORDIST1"}], ",", " ", 
           RowBox[{
            RowBox[{"-", "2"}], " ", "->", " ", "COLORDIST2"}], ",", "  ", 
           RowBox[{
            RowBox[{"-", "3"}], " ", "->", " ", "COLORDIST3"}]}], "}"}]}], 
        ",", 
        RowBox[{"Axes", "->", "False"}]}], "]"}]}], "\[IndentingNewLine]", 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"takes", " ", "a", " ", "pixel", " ", "coordinate", " ", 
     RowBox[{"(", 
      RowBox[{"to", " ", "be", " ", "clicked", " ", "on", " ", "later"}], 
      ")"}], " ", "and", " ", "converts", " ", "it", " ", "to", " ", "a", " ",
      "box", " ", 
     RowBox[{"index", ".", " ", "Block"}], " ", "keeps", " ", "the", " ", 
     "variables", " ", "inside", " ", "it", " ", "a", " ", "local", " ", 
     "variables"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"boxIndex", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"inx_", ",", "iny_"}], "}"}], ",", " ", "NUMX_", ",", " ", 
       "NUMY_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "j", ",", "i"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{"inx", ",", 
           RowBox[{"1", "-", "iny"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"j", "=", 
         RowBox[{"1", "+", 
          RowBox[{"Floor", "[", 
           RowBox[{"x", "*", "NUMX"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"i", "=", 
         RowBox[{"1", "+", 
          RowBox[{"Floor", "[", 
           RowBox[{"y", "*", "NUMY"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getUniverse", "[", "inituniv_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"numx", ",", " ", "numy"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"get", " ", "the", " ", "dimensions"}], ",", " ", 
        RowBox[{"initialize", " ", "the", " ", "universe"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"numy", ",", " ", "numx", ",", " ", "numz"}], "}"}], " ", 
        "=", " ", 
        RowBox[{"Dimensions", "[", "inituniv", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"univ", " ", "=", " ", "inituniv"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Create", " ", "the", " ", "editable", " ", "universe", " ", "pane"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ClickPane", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Dynamic", "@", 
          RowBox[{"univplot", "[", "univ", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "pick", " ", "the", " ", "cell", " ", "by", " ", "clicking"}], 
            " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j"}], "}"}], "=", 
             RowBox[{"boxIndex", "[", 
              RowBox[{
               RowBox[{"#", "/", 
                RowBox[{"{", 
                 RowBox[{"numx", ",", "numy"}], "}"}]}], ",", " ", "numx", 
               ",", " ", "numy"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "replace", " ", "nature", " ", "of", " ", "cell", " ", "by", " ",
               "successive", " ", "clicks"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"univ", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "j", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"univ", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "j", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"0", "->", " ", "1"}], ",", 
                RowBox[{"1", "\[Rule]", "2"}], ",", 
                RowBox[{"2", "\[Rule]", "3"}], ",", " ", 
                RowBox[{"3", "\[Rule]", "0"}]}], "}"}]}]}], " ", ";"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", ")"}], "&"}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"populate", " ", "foodArr"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"updateFood", "[", "univ_", "]"}], " ", ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "array", " ", "storing", "  ", "the", " ", "coordinates", " ", "of", 
       " ", "all", " ", "food", " ", "cell"}], "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"foodArr", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "loop", " ", "through", " ", "each", " ", "cell", " ", "in", " ", 
        "univ"}], "*)"}], "\[IndentingNewLine]", " ", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", " ", 
        RowBox[{"i", "<=", "UNIVSIZE"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", " ", 
          RowBox[{"j", "<=", "UNIVSIZE"}], ",", 
          RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "add", " ", "the", " ", "coordinate", " ", "of", " ", "the", " ", 
            "current", " ", "cell", " ", "to", " ", "foodArr", " ", "if", " ",
             "it", " ", "is", " ", "a", " ", "food", " ", "cell"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"univ", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "j", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "==", "1"}], ",", 
             RowBox[{"foodArr", " ", "=", " ", 
              RowBox[{"Append", "[", 
               RowBox[{"foodArr", ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}]}], " ", "]"}]}], " ", ",", 
             "foodArr"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "add", " ", "the", " ", "coordinate", " ", "of", " ", "the", " ", 
             "current", " ", "cell", " ", "to", " ", "ANIMALS", " ", "if", 
             " ", "it", " ", "is", " ", "an", " ", "animal", " ", "cell"}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"univ", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "j", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "==", "2"}], ",", 
             RowBox[{"ANIMALS", " ", "=", " ", 
              RowBox[{"Append", "[", 
               RowBox[{"ANIMALS", ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}]}], " ", "]"}]}], " ", ",", 
             "ANIMALS"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "foodArr", "]"}]}], "\[IndentingNewLine]", 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "calculate", " ", "the", " ", "shortest", " ", "distance", " ", "between",
      " ", "each", " ", "cell", " ", "in", " ", "univ", " ", "to", " ", "its",
      " ", "nereast", " ", "food"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"updateDist", "[", 
     RowBox[{"univ_", ",", " ", "foodArr_"}], "]"}], " ", ":=", " ", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"updated", " ", "univ", " ", "to", " ", "be", " ", "returned"}],
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newUniv", " ", "=", " ", "univ"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "loop", " ", "through", " ", "each", " ", "cell", " ", "in", " ", 
        "univ"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", " ", 
        RowBox[{"i", "<=", "UNIVSIZE"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", " ", 
          RowBox[{"j", "<=", "UNIVSIZE"}], ",", 
          RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "the", " ", "shortest", " ", "distance", " ", "to", " ", "its", 
            " ", "nearest", " ", "food"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"minDist", " ", "=", " ", "Null"}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "loop", " ", "each", " ", "food", " ", "cell", " ", "and", " ", 
             "calculate", " ", "the", " ", "distance", " ", "between", " ", 
             "the", " ", "current", " ", "cell", " ", "and", " ", "the", " ", 
             "food"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"For", "[", 
            RowBox[{
             RowBox[{"n", "=", "1"}], ",", " ", 
             RowBox[{"n", " ", "<=", " ", 
              RowBox[{"Length", "[", "foodArr", "]"}]}], ",", 
             RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "temporarily", " ", "store", " ", "the", " ", "distant", " ", 
               "between", " ", "the", " ", "current", " ", "cell", " ", "and",
                " ", "a", " ", "given", " ", "food"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"temp", " ", "=", " ", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"foodArr", "[", 
                    RowBox[{"[", "n", "]"}], "]"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "-", "i"}], "]"}], "+", 
                RowBox[{"Abs", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"foodArr", "[", 
                    RowBox[{"[", "n", "]"}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "-", "j"}], "]"}]}]}], ";",
               "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
               "update", " ", "minDist", " ", "if", " ", "temp", " ", "is", 
                " ", "smaller", " ", "than", " ", "the", " ", "current", " ", 
                "minDist"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"If", " ", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"minDist", " ", ">", " ", "temp"}], " ", "||", 
                 RowBox[{"minDist", "==", "Null"}]}], ",", 
                RowBox[{"minDist", " ", "=", " ", "temp"}], ",", " ", 
                "minDist"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", 
              " ", "debugging"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<the distant between [FOOD] \>\"", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"foodArr", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"foodArr", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", " ", 
               "\"\< and [CURRENT CELL] \>\"", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "j"}], "}"}], ",", "\"\< is: \>\"", ",", 
               " ", "temp"}], "]"}], "*)"}], "\[IndentingNewLine]", "]"}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "set", " ", "the", " ", "second", " ", "element", " ", "to", " ", 
             "minDist"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"newUniv", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "j", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", "minDist"}], 
           ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ",
            "debugging"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<the distance to the nerest food from \>\"", ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "j"}], "}"}], ",", " ", "\"\< is: \>\"", ",", 
             "minDist"}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newUniv", "]"}]}], "\[IndentingNewLine]", 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "place", " ", "a", " ", "border", " ", "around", " ", "the", " ", 
     "universe"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"placeBorder", "[", "univ_", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"updated", " ", "univ", " ", "to", " ", "be", " ", "returned"}],
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newUniv", " ", "=", " ", "univ"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"set", " ", "the", " ", "value", " ", "of", " ", "UNIVSIZE"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"UNIVSIZE", " ", "=", " ", 
       RowBox[{"Length", "[", "univ", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "loop", " ", "through", " ", "each", " ", "cell", " ", "in", " ", 
        "univ"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", " ", 
        RowBox[{"i", "<=", "UNIVSIZE"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "if", " ", "it", " ", "is", " ", "not", " ", "the", " ", "top", " ", 
          "or", " ", "bottom", " ", "row"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"i", "==", "1"}], "||", 
           RowBox[{"i", "==", "UNIVSIZE"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "set", " ", "all", " ", "cells", " ", "in", " ", "the", " ", "row",
             " ", "to", " ", "obstacles"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "1"}], ",", " ", 
            RowBox[{"j", "<=", "UNIVSIZE"}], ",", 
            RowBox[{"j", "++"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"newUniv", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "j", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "=", "3"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "set", " ", "only", " ", "the", " ", "first", " ", "and", " ", 
            "last", " ", "cells", " ", "in", " ", "the", " ", "row", " ", 
            "to", " ", "obstacles"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"newUniv", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "=", "3"}], ";", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"newUniv", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "UNIVSIZE", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "=", "3"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newUniv", "]"}]}], "\[IndentingNewLine]", 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "populate", " ", "the", " ", "second", " ", "element", " ", "of", " ", 
     "each", " ", "cell", " ", "in", " ", "univ", " ", "and", " ", "complete",
      " ", "the", " ", "setup", " ", "of", " ", "a", " ", "universe"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"setupUniverse", "[", "univ_", "]"}], " ", ":=", " ", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ANIMALS", " ", "=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"foodArr", " ", "=", " ", 
       RowBox[{"updateFood", "[", "univ", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newUniv", " ", "=", " ", 
       RowBox[{"updateDist", "[", 
        RowBox[{"univ", ",", " ", "foodArr"}], "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newUniv", "]"}], ";"}], "\[IndentingNewLine]", 
     ")"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.485697779362*^9, 3.485697906318*^9}, {3.485697988158*^9,
    3.485697994869*^9}, {3.485698908429*^9, 3.485698923429*^9}, {
   3.48569939238*^9, 3.485699396252*^9}, {3.48569956366*^9, 
   3.4856995936210003`*^9}, {3.485701215286001*^9, 3.485701276498*^9}, 
   3.485701700758*^9, {3.485701880164*^9, 3.485701889027*^9}, {
   3.485703886331001*^9, 3.485703887467*^9}, {3.485772582167245*^9, 
   3.48577260548437*^9}, {3.4857778277233815`*^9, 3.485777852837739*^9}, {
   3.485777911599395*^9, 3.485777911677535*^9}, {3.485778490886177*^9, 
   3.485778492636524*^9}, {3.485778588280497*^9, 3.485778598845092*^9}, {
   3.485779040135752*^9, 3.485779040698364*^9}, {3.485779187618131*^9, 
   3.485779189493503*^9}, {3.485780184628399*^9, 3.485780185237895*^9}, {
   3.485780502066366*^9, 3.485780502519581*^9}, {3.485781250667984*^9, 
   3.485781254700034*^9}, {3.4857835961957445`*^9, 3.485783596461423*^9}, {
   3.485789206855554*^9, 3.485789214482066*^9}, 3.485789248817004*^9, {
   3.48578984221596*^9, 3.48578984665434*^9}, 3.4857901293666687`*^9, {
   3.485793688275741*^9, 3.4857937148747673`*^9}, {3.485794516205595*^9, 
   3.485794519643777*^9}, {3.485795318817928*^9, 3.485795320302596*^9}, {
   3.485871609547802*^9, 3.485871611201559*^9}, {3.485874133626631*^9, 
   3.485874292286354*^9}, {3.510765169512122*^9, 3.510765171516189*^9}, {
   3.510843034967534*^9, 3.5108430681630793`*^9}, {3.510843796995907*^9, 
   3.510843802263776*^9}, {3.510843905554977*^9, 3.510843927504986*^9}, {
   3.510843960137676*^9, 3.510844053081854*^9}, {3.510844085851831*^9, 
   3.51084408607262*^9}, {3.5108526770977583`*^9, 3.510852677681291*^9}, {
   3.5108731689015217`*^9, 3.510873169101947*^9}, {3.510874558293163*^9, 
   3.51087455855599*^9}, {3.574790845104362*^9, 3.5747908636483946`*^9}, {
   3.76331312883435*^9, 3.76331334448844*^9}, {3.763313508735104*^9, 
   3.763313522482415*^9}, {3.763313558103817*^9, 3.763313618609684*^9}, {
   3.763313654032192*^9, 3.763313667677718*^9}, {3.763313777394722*^9, 
   3.763313822677725*^9}, {3.763313858120949*^9, 3.763313941269081*^9}, {
   3.763314330589126*^9, 3.763314345702351*^9}, {3.763315513452107*^9, 
   3.763315634320681*^9}, {3.763315675420745*^9, 3.763315676727927*^9}, {
   3.763315731000389*^9, 3.763315813567374*^9}, {3.763316089063482*^9, 
   3.763316136068538*^9}, {3.763319975181134*^9, 3.763320000329753*^9}, {
   3.763933508150179*^9, 3.763933522371462*^9}, {3.763933656853194*^9, 
   3.763933672483354*^9}, {3.763934368241331*^9, 3.763934552633263*^9}, {
   3.763937352381876*^9, 3.763937386322563*^9}, 3.763942199768083*^9, {
   3.763942396356135*^9, 3.763942399234709*^9}, 3.763942439352784*^9, {
   3.76397382027474*^9, 3.763973865942562*^9}, 3.922484095178977*^9, {
   3.922484126001313*^9, 3.922484214264967*^9}, {3.9224843061394997`*^9, 
   3.922484315962037*^9}, {3.922484408288453*^9, 3.922484432588644*^9}, {
   3.922484587803821*^9, 3.922484593147182*^9}, {3.922523743305133*^9, 
   3.922523783496109*^9}, {3.922524086396143*^9, 3.9225241006241503`*^9}, {
   3.922525352620107*^9, 3.922525353610014*^9}, {3.922802583694435*^9, 
   3.922802696816891*^9}, {3.922802775444646*^9, 3.9228028867671137`*^9}, {
   3.922805766354051*^9, 3.922805770752676*^9}, {3.922805854177916*^9, 
   3.922805945619566*^9}, 3.922871755806744*^9, {3.922973168500028*^9, 
   3.92297318766638*^9}, {3.922973344382286*^9, 3.922973368245247*^9}, {
   3.922973445978559*^9, 3.92297350273383*^9}, {3.922973633915162*^9, 
   3.922973638141686*^9}, {3.922973771647375*^9, 3.922973772067809*^9}, {
   3.922973810000471*^9, 3.922973870561466*^9}, 3.922974038545985*^9, {
   3.922974248806023*^9, 3.922974306002624*^9}, {3.922974643852604*^9, 
   3.922974648631607*^9}, {3.922974744858852*^9, 3.922974746176665*^9}, 
   3.92297493008783*^9, {3.922975016199477*^9, 3.922975026734881*^9}, {
   3.922975200216543*^9, 3.922975334742209*^9}, {3.922975471887838*^9, 
   3.922975702840193*^9}, {3.92297619016919*^9, 3.922976194596327*^9}, {
   3.92297625137109*^9, 3.9229762628888617`*^9}, {3.922976300954619*^9, 
   3.922976393932558*^9}, {3.922976458036397*^9, 3.922976602769594*^9}, {
   3.922976643103858*^9, 3.9229766947707567`*^9}, {3.9229767339786577`*^9, 
   3.922976850436637*^9}, {3.922976953557133*^9, 3.922976956690301*^9}, {
   3.922977031345182*^9, 3.922977033758447*^9}, {3.922977084607873*^9, 
   3.922977092786002*^9}, {3.922977239048925*^9, 3.922977271082989*^9}, {
   3.9229773025987473`*^9, 3.9229773440362797`*^9}, {3.922977441792856*^9, 
   3.92297744261887*^9}, {3.92297749388856*^9, 3.922977499816712*^9}, {
   3.92314659358738*^9, 3.923146666834803*^9}, {3.92314672214285*^9, 
   3.923146753122148*^9}, {3.92314683699749*^9, 3.923146847985748*^9}, {
   3.923146898913052*^9, 3.923146901195373*^9}, {3.923146974164168*^9, 
   3.923147083196686*^9}, {3.923147145484001*^9, 3.923147198135501*^9}, {
   3.9231472446852493`*^9, 3.923147273935669*^9}, {3.923147314500283*^9, 
   3.923147376745809*^9}, {3.923147436054502*^9, 3.923147436298276*^9}, 
   3.923147622984408*^9, 3.923149476005422*^9, {3.923150118297297*^9, 
   3.923150118672316*^9}, {3.923319110579459*^9, 3.923319123363703*^9}, {
   3.923319649230195*^9, 3.923319664535345*^9}, {3.923319703218515*^9, 
   3.923319703917934*^9}, {3.923322542834282*^9, 3.923322689082715*^9}, {
   3.923324749415825*^9, 3.923324811706336*^9}, {3.923324906794841*^9, 
   3.923324971748135*^9}, {3.923325005514027*^9, 3.923325041345481*^9}, {
   3.923325278960602*^9, 3.923325322174031*^9}, {3.9233255056187353`*^9, 
   3.923325594279913*^9}, {3.923325650686827*^9, 3.923325685896875*^9}, {
   3.923325752111236*^9, 3.923325831376037*^9}, {3.923326613678875*^9, 
   3.923326808243639*^9}, {3.923326841107916*^9, 3.923327305971529*^9}, {
   3.923327407654051*^9, 3.923327439222375*^9}, {3.923327710777831*^9, 
   3.923327730543467*^9}, {3.923327874197246*^9, 3.923327876421947*^9}, 
   3.923328071981523*^9, {3.923328117575093*^9, 3.923328373917193*^9}, {
   3.923328436692777*^9, 3.9233284391589327`*^9}, {3.923328475025755*^9, 
   3.923328484527313*^9}, {3.923328517079382*^9, 3.923328523224188*^9}, {
   3.923328560022056*^9, 3.923328566868137*^9}, {3.923328633356043*^9, 
   3.923328747588722*^9}, {3.923329013958253*^9, 3.923329041725609*^9}, {
   3.923329072573463*^9, 3.923329136096971*^9}, {3.923329661642418*^9, 
   3.923329882227289*^9}, {3.923329969172579*^9, 3.923330155944646*^9}, {
   3.923330229847274*^9, 3.923330433909518*^9}, {3.923330512294777*^9, 
   3.923330637470778*^9}, {3.923330668889196*^9, 3.923330671663539*^9}, {
   3.923330709130728*^9, 3.9233308645385*^9}, {3.923330895090184*^9, 
   3.923330907091105*^9}, {3.923330937254197*^9, 3.92333107653931*^9}, {
   3.923331111418582*^9, 3.923331137673414*^9}, {3.923331277217729*^9, 
   3.923331292506791*^9}, 3.923331337426434*^9, {3.923331756294031*^9, 
   3.923331785665038*^9}, {3.92333186404296*^9, 3.923331956605698*^9}, {
   3.923332020021707*^9, 3.923332020262046*^9}, {3.923332056615518*^9, 
   3.92333209056993*^9}, {3.923332216798744*^9, 3.923332239924977*^9}, 
   3.9233323227371206`*^9, {3.923332370073893*^9, 3.92333242116155*^9}, {
   3.923332505893172*^9, 3.923332552738484*^9}, {3.923332594237487*^9, 
   3.923332644240818*^9}, {3.923332696413278*^9, 3.923332724347728*^9}, {
   3.923332763773676*^9, 3.923332821201228*^9}, {3.923332910291689*^9, 
   3.92333300248929*^9}, {3.923333034098358*^9, 3.923333034815832*^9}, {
   3.923333066995781*^9, 3.923333072827231*^9}, {3.923333128308319*^9, 
   3.923333167892684*^9}, {3.923333230598666*^9, 3.923333230830089*^9}, {
   3.923333297642399*^9, 3.923333308371763*^9}, {3.92333335723072*^9, 
   3.92333337295502*^9}, {3.923333522523136*^9, 3.923333553178015*^9}, 
   3.92333362736891*^9, {3.923333694144286*^9, 3.923333698627739*^9}, {
   3.923333743376682*^9, 3.923333823966775*^9}, {3.923333862769381*^9, 
   3.923333914211038*^9}, 3.923333957468062*^9, {3.92333399520596*^9, 
   3.923334002412834*^9}, {3.923334034254032*^9, 3.923334045959633*^9}, {
   3.923334076153895*^9, 3.923334077486459*^9}, {3.923334113053988*^9, 
   3.923334161882895*^9}, {3.923334196629619*^9, 3.92333425927966*^9}, {
   3.923334313745175*^9, 3.923334445852767*^9}, {3.92333448678345*^9, 
   3.923334519536288*^9}, {3.923334549859208*^9, 3.923334576764889*^9}, {
   3.92333461876832*^9, 3.923334730575281*^9}, {3.923334770750166*^9, 
   3.923334772361092*^9}, {3.923334838248722*^9, 3.923334911993247*^9}, {
   3.923334978286463*^9, 3.923334991426434*^9}, {3.923335113180518*^9, 
   3.923335202115594*^9}, {3.923335234724082*^9, 3.923335236107695*^9}, 
   3.923335309838808*^9, {3.923335365223714*^9, 3.92333536879561*^9}, {
   3.923335414396415*^9, 3.923335466308697*^9}, {3.923335513979028*^9, 
   3.923335515041898*^9}, {3.923335568668342*^9, 3.923335609686401*^9}, {
   3.923335730496996*^9, 3.9233358272999496`*^9}, 3.923335894555455*^9, {
   3.923335945543023*^9, 3.92333594808302*^9}, {3.923336096575354*^9, 
   3.923336179908443*^9}, {3.923336222332594*^9, 3.923336304259989*^9}, {
   3.923336383130937*^9, 3.92333650446208*^9}, {3.923336790523432*^9, 
   3.923336925993266*^9}, {3.923336992335637*^9, 3.92333702485688*^9}, 
   3.923337085471815*^9, {3.923337134355674*^9, 3.923337134793159*^9}, {
   3.923337557785294*^9, 3.923337602902244*^9}, {3.923337639499591*^9, 
   3.923337657094655*^9}, {3.92333772485861*^9, 3.923337725138146*^9}, {
   3.923337785290423*^9, 3.923337817254695*^9}, {3.923337876433501*^9, 
   3.92333789938075*^9}, {3.923337962764299*^9, 3.923338019078068*^9}, {
   3.923338056855814*^9, 3.923338059812922*^9}, {3.923338333200783*^9, 
   3.923338338858891*^9}, {3.923341441621894*^9, 3.923341483829465*^9}, {
   3.923341536317195*^9, 3.92334153824163*^9}, 3.9233416616208887`*^9, {
   3.92344090461516*^9, 3.923440924122007*^9}, {3.923440983041472*^9, 
   3.923441007813374*^9}, {3.923441052226593*^9, 3.923441052776978*^9}, {
   3.923474082278232*^9, 3.923474188862825*^9}, {3.923474236490205*^9, 
   3.923474253529735*^9}, {3.923474308848398*^9, 3.923474407098763*^9}, {
   3.923474441629217*^9, 3.923474448184962*^9}, {3.923474527476198*^9, 
   3.923474532802767*^9}, {3.923474653146113*^9, 3.923474702217844*^9}, {
   3.923474873561809*^9, 3.923474878735779*^9}, {3.923474995864634*^9, 
   3.923475036912016*^9}, {3.9234751513632717`*^9, 3.923475173103381*^9}, {
   3.923475215905589*^9, 3.923475248217064*^9}, {3.923475330088204*^9, 
   3.923475331846198*^9}, {3.923475370486188*^9, 3.923475370784251*^9}, {
   3.923475421918502*^9, 3.923475424144003*^9}, {3.923475534499365*^9, 
   3.9234755911200113`*^9}, {3.92347573460641*^9, 3.923475927509324*^9}, {
   3.923476310651142*^9, 3.923476322869849*^9}, {3.92347638135054*^9, 
   3.923476426157185*^9}, {3.923476482874533*^9, 3.92347649531559*^9}, {
   3.92347656656992*^9, 3.9234765725788383`*^9}, {3.923476622916514*^9, 
   3.9234766338963227`*^9}, {3.923476682682121*^9, 3.923476716761228*^9}, {
   3.9234767650658407`*^9, 3.923476769201045*^9}, {3.923477165907549*^9, 
   3.923477206870456*^9}, {3.923477244621112*^9, 3.923477276248587*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellLabel->
  "In[149]:=",ExpressionUUID->"2970f92e-260f-44a9-b3ae-337825b28dd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules:", "Section",
 CellChangeTimes->{{3.923327503148197*^9, 
  3.923327528209951*^9}},ExpressionUUID->"8c67fb4e-ffff-48d6-9739-\
b841e576319c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"neighCoords", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], " ", ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "-", "1"}], ",", " ", "j"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "+", "1"}], ",", "j"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"j", "-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"j", "+", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "+", "1"}], ",", " ", 
       RowBox[{"j", "+", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "-", "1"}], ",", " ", 
       RowBox[{"j", "+", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "+", "1"}], ",", " ", 
       RowBox[{"j", "-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "-", "1"}], ",", " ", 
       RowBox[{"j", "-", "1"}]}], "}"}]}], " ", "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findNext", "[", 
    RowBox[{"i_", ",", "j_", ",", " ", "univ_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"neighbors", "=", " ", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"neighCoords", "[", 
        RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"minIndex", " ", "=", " ", "Null"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"minDistance", " ", "=", " ", "Null"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"n", "=", "1"}], ",", " ", 
       RowBox[{"n", " ", "<=", " ", 
        RowBox[{"Length", "[", "neighbors", "]"}]}], ",", 
       RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"univ", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"neighbors", "[", 
                RowBox[{"[", 
                 RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
               RowBox[{"neighbors", "[", 
                RowBox[{"[", 
                 RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "1"}], "]"}], 
             "]"}], "<", " ", "2"}], " ", "&&", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"minDistance", " ", ">", 
              RowBox[{"univ", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"neighbors", "[", 
                  RowBox[{"[", 
                   RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"neighbors", "[", 
                  RowBox[{"[", 
                   RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "2"}], "]"}], 
               "]"}]}], "||", " ", 
             RowBox[{"TrueQ", "[", 
              RowBox[{"minDistance", " ", "==", " ", "Null"}], "]"}]}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"minIndex", " ", "=", " ", "n"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"minDistance", " ", "=", " ", 
            RowBox[{"univ", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"neighbors", "[", 
                RowBox[{"[", 
                 RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
               RowBox[{"neighbors", "[", 
                RowBox[{"[", 
                 RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "2"}], "]"}], 
             "]"}]}]}], ",", "\[IndentingNewLine]", "Null"}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ", 
        "debugging"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<[minDist loop] index: \>\"", ",", " ", "n", ",", " ", 
          "\"\< dist: \>\"", ",", 
          RowBox[{"univ", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"neighbors", "[", 
              RowBox[{"[", 
               RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"neighbors", "[", 
              RowBox[{"[", 
               RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "2"}], "]"}], 
           "]"}]}], " ", "]"}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"neighbors", "[", 
       RowBox[{"[", "minIndex", "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
    ")"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"foraging", "[", "univ_", "]"}], " ", ":=", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newUniv", " ", "=", " ", 
     RowBox[{"setupUniverse", "[", "univ", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"c", "=", "1"}], ",", " ", 
      RowBox[{"c", " ", "<=", " ", 
       RowBox[{"Length", "[", "ANIMALS", "]"}]}], ",", 
      RowBox[{"c", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nextCoord", " ", "=", " ", 
        RowBox[{"findNext", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ANIMALS", "[", 
            RowBox[{"[", "c", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"ANIMALS", "[", 
            RowBox[{"[", "c", "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", " ", "newUniv"}], "]"}]}], 
       " ", ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "set", " ", "the", " ", "next", " ", "cell", " ", "type", " ", "to", 
         " ", "animal"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newUniv", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"nextCoord", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"nextCoord", "[", 
            RowBox[{"[", "2", "]"}], "]"}], " ", ",", " ", "1"}], "]"}], 
         "]"}], " ", "=", " ", "2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "uncomment", " ", "the", " ", "code", " ", "below", " ", "for", " ", 
         "debugging"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<[animal loop] count: \>\"", ",", " ", "c", ",", " ", 
           "\"\< dist: \>\"", ",", 
           RowBox[{"nextCoord", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"nextCoord", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"newUniv", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"nextCoord", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"nextCoord", "[", 
               RowBox[{"[", "2", "]"}], "]"}], " ", ",", " ", "1"}], "]"}], 
            "]"}]}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "set", " ", "the", " ", "current", " ", "cell", " ", "type", " ", 
         "to", " ", "empty"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newUniv", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{
            RowBox[{"ANIMALS", "[", 
             RowBox[{"[", "c", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"ANIMALS", "[", 
             RowBox[{"[", "c", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], "]"}], " ", 
        "=", " ", "0"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Return", "[", "newUniv", "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]}], "Input",
 CellChangeTimes->{{3.763337804064336*^9, 3.763337810361442*^9}, 
   3.763337876429354*^9, {3.763338186959158*^9, 3.763338200823838*^9}, {
   3.763338312029831*^9, 3.763338316875706*^9}, 3.763338455125943*^9, {
   3.76333850635526*^9, 3.763338547166751*^9}, {3.763338583412932*^9, 
   3.76333859009783*^9}, {3.763338672198976*^9, 3.763338686035786*^9}, {
   3.763338730425802*^9, 3.763338798840802*^9}, {3.763338876171174*^9, 
   3.763338908887693*^9}, {3.763338968632909*^9, 3.763338990272965*^9}, {
   3.763339115612254*^9, 3.763339116487278*^9}, {3.763668223243005*^9, 
   3.763668281821751*^9}, {3.763668766063059*^9, 3.763668767819612*^9}, {
   3.763669892217641*^9, 3.763669906347568*^9}, {3.763670485602007*^9, 
   3.7636705032398243`*^9}, {3.763670536505629*^9, 3.763670621044465*^9}, {
   3.763670739952417*^9, 3.763670748406402*^9}, {3.76367470012427*^9, 
   3.763674752668367*^9}, {3.763674814608994*^9, 3.763674856777032*^9}, {
   3.763674887391538*^9, 3.763674979009781*^9}, {3.763675012837525*^9, 
   3.763675029734939*^9}, {3.763675086596758*^9, 3.763675191423739*^9}, 
   3.763675352512999*^9, 3.763675556051046*^9, {3.763676895014266*^9, 
   3.763676896396949*^9}, {3.763739798275614*^9, 3.763739799808289*^9}, {
   3.763823433477758*^9, 3.76382343548729*^9}, {3.763937884349903*^9, 
   3.763937918149007*^9}, 3.763937949765306*^9, {3.763938172440219*^9, 
   3.76393818331753*^9}, {3.763938213659562*^9, 3.763938220816139*^9}, {
   3.763938268502885*^9, 3.763938308257834*^9}, {3.763938413192345*^9, 
   3.763938427158421*^9}, {3.763938475073585*^9, 3.7639385534706*^9}, {
   3.763938703050123*^9, 3.763938775194291*^9}, {3.763938817281962*^9, 
   3.763938827761599*^9}, {3.763938861460985*^9, 3.763938868588629*^9}, {
   3.76393890814572*^9, 3.763938920762166*^9}, 3.763939022781989*^9, {
   3.76394065443788*^9, 3.7639406596148653`*^9}, {3.763940777071216*^9, 
   3.763940978267234*^9}, {3.76394104008423*^9, 3.76394110756537*^9}, {
   3.763941489452992*^9, 3.7639414920651293`*^9}, {3.763941750143494*^9, 
   3.763941770071195*^9}, {3.763941980458417*^9, 3.763941982577474*^9}, {
   3.7639420698530273`*^9, 3.763942097298435*^9}, {3.763942282013773*^9, 
   3.763942304174595*^9}, {3.763943082939733*^9, 3.763943393496932*^9}, {
   3.763943610289818*^9, 3.7639436936092787`*^9}, {3.763943732686698*^9, 
   3.763943765327544*^9}, {3.763943871023773*^9, 3.763943887877438*^9}, {
   3.763943923037524*^9, 3.763943949281575*^9}, 3.763944045647889*^9, 
   3.763944145761989*^9, {3.763944538253102*^9, 3.763944629682744*^9}, {
   3.763945018901464*^9, 3.763945106977405*^9}, {3.763945148395259*^9, 
   3.763945156843594*^9}, {3.7639726912134666`*^9, 3.763972733080488*^9}, {
   3.763972765979689*^9, 3.763972806296191*^9}, {3.7639728534776*^9, 
   3.763972862156529*^9}, {3.763972981095361*^9, 3.763972982402217*^9}, {
   3.763973072421647*^9, 3.763973082038007*^9}, {3.76397321330941*^9, 
   3.763973239077458*^9}, 3.763973300856778*^9, {3.763974091046637*^9, 
   3.763974094064934*^9}, {3.763974222305278*^9, 3.763974228429801*^9}, {
   3.763974560531664*^9, 3.763974585390458*^9}, {3.763974653115458*^9, 
   3.763974710750752*^9}, {3.763975721928123*^9, 3.763975767271687*^9}, {
   3.763975937637388*^9, 3.763975940610686*^9}, {3.763976975195234*^9, 
   3.763976980797575*^9}, {3.763977355457222*^9, 3.76397736282115*^9}, {
   3.763981304520815*^9, 3.763981323319218*^9}, {3.76398140235913*^9, 
   3.763981437255394*^9}, 3.76398149259266*^9, {3.76398153667054*^9, 
   3.763981567897811*^9}, {3.763984474283019*^9, 3.763984522632335*^9}, {
   3.763984554195935*^9, 3.763984573656623*^9}, {3.891075535775318*^9, 
   3.891075555938368*^9}, {3.922464012557038*^9, 3.922464050604738*^9}, {
   3.922464693008074*^9, 3.922464693537918*^9}, 3.922482134741642*^9, {
   3.92248283905589*^9, 3.9224828529786*^9}, {3.922482920052608*^9, 
   3.922482929171544*^9}, {3.922482962238585*^9, 3.922483015465969*^9}, {
   3.92248330062983*^9, 3.92248335796622*^9}, 3.922483437274736*^9, 
   3.922483890450171*^9, 3.9224839450221357`*^9, {3.922483996969789*^9, 
   3.922484000946598*^9}, {3.922486248295079*^9, 3.922486261531388*^9}, {
   3.9224866064687977`*^9, 3.922486713891893*^9}, {3.922487049387091*^9, 
   3.922487121868961*^9}, {3.922802419515672*^9, 3.922802424166436*^9}, {
   3.922871810127543*^9, 3.92287186892414*^9}, {3.922977509333256*^9, 
   3.922977510543894*^9}, {3.922977568877876*^9, 3.922977611756816*^9}, {
   3.9231463593046017`*^9, 3.923146490066993*^9}, {3.923146550429456*^9, 
   3.923146557881076*^9}, {3.923146716823378*^9, 3.923146717156679*^9}, {
   3.923147384755212*^9, 3.923147384949182*^9}, {3.923147468745974*^9, 
   3.923147469948064*^9}, {3.92314760142106*^9, 3.923147634843486*^9}, {
   3.923147768267363*^9, 3.923147771505424*^9}, {3.923147837540277*^9, 
   3.923147841515408*^9}, {3.9231478767582283`*^9, 3.923148039587857*^9}, {
   3.92314808205331*^9, 3.923148088120688*^9}, {3.923148144687983*^9, 
   3.923148145484586*^9}, {3.923148179066135*^9, 3.92314820100598*^9}, {
   3.923148350119478*^9, 3.92314843954039*^9}, {3.923148520829761*^9, 
   3.923148554642219*^9}, {3.923148627247821*^9, 3.923148628365915*^9}, 
   3.923148713675218*^9, {3.923148744605695*^9, 3.923148826192579*^9}, 
   3.9231488756611853`*^9, {3.923148952247014*^9, 3.923148962444132*^9}, {
   3.923149116007078*^9, 3.92314911776471*^9}, {3.9231492253644953`*^9, 
   3.923149236434483*^9}, {3.923149302024445*^9, 3.923149330075819*^9}, {
   3.9231494080482273`*^9, 3.923149422773631*^9}, {3.923149553276713*^9, 
   3.923149553571722*^9}, {3.923149617408078*^9, 3.923149619286079*^9}, {
   3.923149693445215*^9, 3.923149699683477*^9}, 3.9231499888630657`*^9, {
   3.923150047244703*^9, 3.923150049968561*^9}, {3.923150230192458*^9, 
   3.923150261492894*^9}, {3.923150324716511*^9, 3.923150381432315*^9}, {
   3.92315044059211*^9, 3.923150491500095*^9}, {3.923150602089169*^9, 
   3.9231506055229206`*^9}, {3.923246127960338*^9, 3.923246134235718*^9}, {
   3.9232462361207314`*^9, 3.923246305927608*^9}, {3.923246337683242*^9, 
   3.923246475524667*^9}, {3.923246567345982*^9, 3.923246577797758*^9}, {
   3.923317958087388*^9, 3.923317961742103*^9}, {3.923318045582284*^9, 
   3.923318075301528*^9}, {3.92331817507981*^9, 3.923318189710979*^9}, {
   3.923318247274312*^9, 3.923318285732851*^9}, {3.923318328069087*^9, 
   3.9233183346193247`*^9}, {3.9233184161878443`*^9, 3.923318416712784*^9}, {
   3.92331850992674*^9, 3.923318539763904*^9}, {3.923318588182283*^9, 
   3.923318589940957*^9}, {3.923318621883655*^9, 3.923318647177738*^9}, {
   3.923318727506318*^9, 3.923318770864532*^9}, {3.923319676278165*^9, 
   3.923319695970649*^9}, 3.923322433736121*^9, {3.923324790195586*^9, 
   3.923324879461255*^9}, 3.923324914837245*^9, 3.923325022300037*^9, {
   3.9233254377430553`*^9, 3.92332543850067*^9}, {3.923409735194463*^9, 
   3.923409798891953*^9}, {3.9234098344984837`*^9, 3.923409835880733*^9}, {
   3.923437436072948*^9, 3.923437530293233*^9}, {3.923437586168377*^9, 
   3.923438091324518*^9}, {3.923441103485869*^9, 3.923441215101643*^9}, {
   3.923441248385884*^9, 3.923441693605006*^9}, {3.923441808218614*^9, 
   3.923441865961349*^9}, {3.923442616434561*^9, 3.9234426355413313`*^9}, {
   3.92344271795533*^9, 3.9234427289281607`*^9}, {3.923442876650951*^9, 
   3.923442904859703*^9}, 3.923442952311226*^9, {3.923442993374429*^9, 
   3.923442996322689*^9}, {3.923443032761717*^9, 3.923443043424093*^9}, {
   3.923443671157413*^9, 3.923443675222862*^9}, {3.923443741405449*^9, 
   3.923443775373629*^9}, {3.923443823421998*^9, 3.923443834340184*^9}, {
   3.923472716863312*^9, 3.923472719218395*^9}, {3.9234732957388773`*^9, 
   3.923473317488372*^9}, {3.9234733790943403`*^9, 3.923473382968371*^9}, {
   3.923473614132566*^9, 3.923473616930543*^9}, {3.923473884368967*^9, 
   3.92347388491921*^9}, 3.923475964887944*^9},
 CellLabel->
  "In[166]:=",ExpressionUUID->"e28d994e-fca5-4cda-bf5d-2e46bf9524d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Running the Program", "Section",
 CellChangeTimes->{{3.923327480841691*^9, 3.923327487930799*^9}, {
  3.92355919162624*^9, 
  3.9235591922851763`*^9}},ExpressionUUID->"1eb53d5c-8d6f-42d3-b83e-\
142f3844b5f0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"univsize", " ", "=", " ", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"univ", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", "univsize", "}"}], ",", 
     RowBox[{"{", "univsize", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"univ", " ", "=", " ", 
   RowBox[{"placeBorder", "[", "univ", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"getUniverse", "[", "univ", "]"}]}], "Input",
 CellChangeTimes->{{3.922804623298604*^9, 3.9228046807054863`*^9}, {
   3.922804870931587*^9, 3.922804917099684*^9}, {3.922805533349704*^9, 
   3.922805540084799*^9}, {3.922805678731632*^9, 3.92280568082004*^9}, {
   3.922805781705207*^9, 3.922805792961977*^9}, {3.9228717129766817`*^9, 
   3.922871727939337*^9}, {3.922973193020273*^9, 3.922973229030218*^9}, {
   3.922973377858232*^9, 3.922973418296175*^9}, 3.922973539359359*^9, {
   3.922973680958292*^9, 3.922973694633155*^9}, {3.922973761538998*^9, 
   3.922973761969775*^9}, {3.922973793605101*^9, 3.922973796174142*^9}, {
   3.922973940446387*^9, 3.922973941986115*^9}, {3.922974044670259*^9, 
   3.922974049853805*^9}, {3.922974275740119*^9, 3.922974276283905*^9}, {
   3.92297431536854*^9, 3.922974315914876*^9}, {3.922974407228364*^9, 
   3.922974407370403*^9}, {3.922974455246503*^9, 3.9229744853276787`*^9}, {
   3.922974728130817*^9, 3.922974728555653*^9}, {3.922977281511961*^9, 
   3.922977282202544*^9}, {3.922977353790875*^9, 3.922977370218349*^9}, 
   3.923146222953024*^9, 3.923146802789695*^9, 3.923149241046904*^9, {
   3.923149497748041*^9, 3.923149500720419*^9}, {3.923150114819177*^9, 
   3.923150115171894*^9}, {3.9231504048012543`*^9, 3.923150405460054*^9}, {
   3.923319697716424*^9, 3.923319700866089*^9}, 3.9233197330102463`*^9, {
   3.923322456729062*^9, 3.923322494322386*^9}, 3.923325173486609*^9, {
   3.923325232381641*^9, 3.923325256204051*^9}, {3.923325408933187*^9, 
   3.923325414543*^9}, {3.923325467434509*^9, 3.923325484480267*^9}, {
   3.9233256266547823`*^9, 3.923325627403968*^9}, {3.92332570664086*^9, 
   3.923325711679431*^9}, {3.923332833914082*^9, 3.923332834327709*^9}, {
   3.923332876598368*^9, 3.923332877110235*^9}, {3.923334167124538*^9, 
   3.923334170741242*^9}, {3.923334419902197*^9, 3.923334420385859*^9}, {
   3.923335654871849*^9, 3.923335655516141*^9}, {3.923337766677072*^9, 
   3.923337767555238*^9}, {3.923341584067286*^9, 3.923341584646122*^9}, {
   3.923407998805545*^9, 3.92340800159555*^9}, {3.923409482131518*^9, 
   3.923409482698598*^9}, {3.9234436794327803`*^9, 3.923443679969238*^9}, 
   3.923474044517988*^9, {3.923474611884686*^9, 3.9234746298161287`*^9}, {
   3.923475257266343*^9, 3.923475269887429*^9}, 3.923475615884505*^9, {
   3.923476004544262*^9, 3.923476006388764*^9}, {3.923476048788898*^9, 
   3.923476052901587*^9}, {3.923476107103581*^9, 3.92347610947753*^9}, {
   3.923476147325073*^9, 3.923476151902012*^9}, {3.923476196018784*^9, 
   3.923476198479187*^9}, 3.923476288552335*^9, {3.923476530285554*^9, 
   3.923476531925851*^9}, {3.923476580277109*^9, 3.923476580577255*^9}, {
   3.923476648324781*^9, 3.923476649288555*^9}, 3.923477109130251*^9, {
   3.923477220375489*^9, 3.923477249978215*^9}, {3.923497209829743*^9, 
   3.923497215513237*^9}, {3.92349737333241*^9, 3.923497373781195*^9}},
 CellLabel->
  "In[177]:=",ExpressionUUID->"3cf070ec-e991-4ae7-a357-e226f9f52451"],

Cell[BoxData[
 TagBox[
  DynamicBox[ToBoxes[
    $CellContext`univplot[$CellContext`univ], StandardForm],
   ImageSizeCache->{168., {4.1, 14.26}}],
  EventHandlerTag[{
   "MouseClicked" :> (({$CellContext`i, $CellContext`j} = \
$CellContext`boxIndex[#/{$CellContext`numx$2649731, \
$CellContext`numy$2649731}, $CellContext`numx$2649731, \
$CellContext`numy$2649731]; Part[
        Part[
         Part[$CellContext`univ, $CellContext`i], $CellContext`j], 1] = 
      ReplaceAll[
        Part[
         Part[
          Part[$CellContext`univ, $CellContext`i], $CellContext`j], 1], {
        0 -> 1, 1 -> 2, 2 -> 3, 3 -> 0}]; Null)& )[
      MousePosition["EventHandlerAutomatic"]], Method -> "Preemptive", 
    PassEventsDown -> Automatic, PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{{3.923477250477757*^9, 3.92347729102546*^9}, 
   3.923477679289188*^9, 3.923477788471908*^9, 3.923477886369113*^9, 
   3.923478390984291*^9, {3.923478926134384*^9, 3.923478934714498*^9}, 
   3.923479456290511*^9, 3.923479683713773*^9, 3.923479839483335*^9, 
   3.923496330916787*^9, {3.923497115173606*^9, 3.923497134446175*^9}, {
   3.923497210888305*^9, 3.923497216713545*^9}, 3.923497374148068*^9, 
   3.923502674355457*^9, {3.923558913519583*^9, 3.923558936664187*^9}},
 CellLabel->
  "Out[180]=",ExpressionUUID->"605db8f5-a4b3-44ef-96cf-257719d61567"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Moving the animals", "Subsection",
 CellChangeTimes->{{3.92350350285744*^9, 3.923503521575281*^9}, {
  3.9235035948588943`*^9, 
  3.923503604485341*^9}},ExpressionUUID->"38fe7439-18e7-4b92-b19b-\
3a0f2f5e9815"],

Cell[CellGroupData[{

Cell["Method #1:  Run the program manually", "Subsubsection",
 CellChangeTimes->{{3.923503614477281*^9, 
  3.923503646378915*^9}},ExpressionUUID->"2d7ad44e-6057-4525-a401-\
cc8ff2a87edd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "UNCOMMENT", " ", "THIS", " ", "SECTION", " ", "TO", " ", "RUN", " ", 
    "THE", " ", "SIMIULATION", " ", "MANUALLY"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"univ", " ", "=", " ", 
     RowBox[{"foraging", "[", "univ", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"univplot", "[", "univ", "]"}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "uncomment", " ", "the", " ", "code", " ", "below", " ", "to", " ", 
    "check", " ", "that", " ", "the", " ", "second", " ", "element", " ", 
    "of", " ", "each", " ", "cell", " ", "is", " ", "updated"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"MatrixForm", "[", "univ", "]"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.923150157710568*^9, 3.923150198813959*^9}, {
   3.923150527025039*^9, 3.923150527796322*^9}, {3.923246591366494*^9, 
   3.923246592290071*^9}, {3.923318792512327*^9, 3.92331879655583*^9}, {
   3.923325076844091*^9, 3.923325088968854*^9}, {3.9233253283051853`*^9, 
   3.923325333134804*^9}, 3.923325475950624*^9, {3.923325704053727*^9, 
   3.923325704947661*^9}, {3.923327323452151*^9, 3.923327383880213*^9}, {
   3.923332028774568*^9, 3.923332036279428*^9}, {3.923335968544893*^9, 
   3.923335973004871*^9}, {3.92333703724088*^9, 3.923337038587956*^9}, 
   3.923341573352234*^9, 3.923341668696609*^9, {3.923408015697942*^9, 
   3.92340802711549*^9}, {3.923409491479011*^9, 3.923409501637584*^9}, 
   3.923437412381211*^9, {3.923441022582295*^9, 3.9234410232560987`*^9}, {
   3.923441703949801*^9, 3.923441767114114*^9}, {3.923441930769598*^9, 
   3.923442014929775*^9}, {3.923442306399202*^9, 3.923442321328312*^9}, {
   3.923442507377654*^9, 3.92344255609973*^9}, {3.923442641976424*^9, 
   3.923442662349883*^9}, {3.923473052654683*^9, 3.923473054697747*^9}, {
   3.923473193314799*^9, 3.923473195203156*^9}, 3.923473464730404*^9, {
   3.923473520501479*^9, 3.923473521896084*^9}, {3.923474028532969*^9, 
   3.923474037724393*^9}, {3.9234756372157784`*^9, 3.923475638152031*^9}, {
   3.9234757133417883`*^9, 3.923475714052*^9}, {3.923477307581498*^9, 
   3.923477309148304*^9}, 3.92347782693606*^9, {3.923478596578639*^9, 
   3.923478607690641*^9}, 3.92347873101161*^9, {3.9234791770541887`*^9, 
   3.923479195644705*^9}, {3.923479490848028*^9, 3.923479523229398*^9}, {
   3.923479828893671*^9, 3.92347983702186*^9}, 3.923496462625435*^9, {
   3.92349668469169*^9, 3.923496697964664*^9}, {3.923503282371436*^9, 
   3.923503326865367*^9}, 3.923503649501457*^9},
 CellLabel->
  "In[173]:=",ExpressionUUID->"6fd9f5f5-2051-43cb-9a9a-23ba79aac6a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Method #2 :  Run the program with manipulate[] but animals follow a different \
path each time\
\>", "Subsubsection",
 CellChangeTimes->{{3.923503660097466*^9, 3.923503720966898*^9}, 
   3.923508372646604*^9},ExpressionUUID->"a2d40206-3aeb-4498-a73d-\
1c42e1c00663"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "UNCOMMENT", " ", "THIS", " ", "SECTION", " ", "TO", " ", "RUN", " ", 
    "THE", " ", "SIMIULATION", " ", "WITH", " ", 
    RowBox[{"MANIPULATE", "[", "]"}], " ", "BUT", " ", "ANIMALS", " ", 
    "FOLLOW", " ", "A", " ", "DIFFERENT", " ", "PATH", " ", "EACH", " ", 
    "TIME"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"univByStep", "[", 
     RowBox[{"univ_", ",", " ", "n_"}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Nest", "[", 
      RowBox[{"foraging", ",", " ", "univ", ",", " ", "n"}], "]"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Manipulate", "[", 
      RowBox[{
       RowBox[{"univplot", "[", 
        RowBox[{"univByStep", "[", 
         RowBox[{"univ", ",", " ", "n"}], "]"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", "1", ",", " ", "10", ",", "1"}], "}"}]}], "]"}]}]}],
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.923497355464283*^9, 3.923497363137554*^9}, {
   3.923497835071054*^9, 3.923497835660338*^9}, 3.923502994443264*^9, 
   3.9235030960141993`*^9, 3.923503131681001*^9, {3.9235033332422047`*^9, 
   3.923503416341431*^9}, {3.923503763935728*^9, 3.923503769267363*^9}},
 CellLabel->
  "In[174]:=",ExpressionUUID->"1edfa738-f8ca-48b8-86d0-4aa7a2ecf20e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Method  #3:  Run  the  program  with  manipulate[] but  animals follow the \
same path every time\
\>", "Subsubsection",
 CellChangeTimes->{{3.923503728268614*^9, 3.923503781979797*^9}, {
  3.923508371174556*^9, 
  3.9235083975181103`*^9}},ExpressionUUID->"a44e64ae-f4f2-42c0-9dfd-\
c0c64575f09c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "UNCOMMENT", " ", "THIS", " ", "SECTION", " ", "TO", " ", "RUN", " ", 
    "THE", " ", "SIMIULATION", " ", "WITH", " ", 
    RowBox[{"MANIPULATE", "[", "]"}], " ", "BUT", " ", "ANIMALS", " ", 
    "FOLLOW", " ", "THE", " ", "SAME", " ", "PATH", " ", "EVERY", " ", 
    "TIME"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"univevolution", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"univ", "=", 
        RowBox[{"foraging", "[", "univ", "]"}]}], ",", " ", 
       RowBox[{"{", "10", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", 
    RowBox[{
     RowBox[{"univplot", "[", 
      RowBox[{"univevolution", "[", 
       RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", " ", "10", ",", "1"}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.923503015558539*^9, 3.923503026841461*^9}, 
   3.9235030939258633`*^9, {3.923503127777186*^9, 3.923503200644259*^9}, {
   3.9235034228853707`*^9, 3.923503441498835*^9}, {3.923503762335822*^9, 
   3.923503772221908*^9}},
 CellLabel->
  "In[183]:=",ExpressionUUID->"f58ef84e-8ed2-4e89-9e83-8775b9c73231"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 10, 1, ControlType -> Manipulator}}, 
    Typeset`size$$ = {312., {4.1, 14.26}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`univplot[
        Part[$CellContext`univevolution, $CellContext`n$$]], 
      "Specifications" :> {{$CellContext`n$$, 1, 10, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{360., {62., 71.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.92350344268292*^9, 3.923503447993785*^9}, {
  3.923558920057629*^9, 3.923558970418202*^9}},
 CellLabel->
  "Out[184]=",ExpressionUUID->"6138ddc2-939e-4f9a-9bc9-cc61ca08697f"],

Cell["\<\
Part::partd: Part specification univevolution[[1]]
     is longer than depth of object.\
\>", "Message", "MSG",
 CellChangeTimes->{3.9235742369952497`*^9},
 CellLabel->
  "During evaluation of \
In[1]:=",ExpressionUUID->"13829f09-dd7d-4d78-b374-9b8abd8f4593"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"0adb5d48-db5d-496d-915d-6f23fe954e62"]
},
WindowSize->{1308, 996},
WindowMargins->{{Automatic, 153}, {Automatic, 0}},
TaggingRules->{
 "SlideShow" -> True, "SlideshowSettings" -> {"Toolbar" -> True}},
FrontEndVersion->"14.0 for Mac OS X x86 (64-bit) (December 12, 2023)",
StyleDefinitions->FrontEnd`FileName[{"SlideShow"}, "Water.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"955915bb-b638-4d27-af01-5c5938ad6e44"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[580, 22, 4445, 97, 75, "SlideShowNavigationBar",ExpressionUUID->"1d60e4e3-1a5d-46c6-b542-8fd6e709ef5d",
   CellTags->"SlideShowHeader"],
  Cell[5415, 135, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"40efeee9-eba4-41d6-b979-fc61127aa250",
   CellTags->"SlideShowHeader"],
  Cell[67415, 1176, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"255749bb-8145-4bd2-8657-b7f7267d9a15",
   CellTags->"SlideShowHeader"],
  Cell[71218, 1298, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"cd52f003-0deb-43ea-9c10-f656f478e159",
   CellTags->"SlideShowHeader"],
  Cell[81134, 1549, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"06dc16af-fae6-44a2-a8a4-c8439072d273",
   CellTags->"SlideShowHeader"],
  Cell[94262, 1878, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"8b577f2d-f8b5-47ec-8921-1722b1cce606",
   CellTags->"SlideShowHeader"],
  Cell[97643, 1967, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"c25bcb14-bab6-4113-97c1-3ad380d2a6c3",
   CellTags->"SlideShowHeader"],
  Cell[167204, 3430, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"0adb5d48-db5d-496d-915d-6f23fe954e62",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 167833, 3448}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 4445, 97, 75, "SlideShowNavigationBar",ExpressionUUID->"1d60e4e3-1a5d-46c6-b542-8fd6e709ef5d",
 CellTags->"SlideShowHeader"],
Cell[5028, 121, 177, 4, 277, "Title",ExpressionUUID->"0f2d3db6-bf67-48c7-bebc-0736b66986b4"],
Cell[5208, 127, 170, 3, 86, "Subtitle",ExpressionUUID->"58db3571-3c89-412a-8665-fe0e0d6183dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5415, 135, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"40efeee9-eba4-41d6-b979-fc61127aa250",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[5562, 141, 162, 3, 129, "Section",ExpressionUUID->"1a3eeec7-d27a-4164-adbb-892e90f8024d"],
Cell[5727, 146, 60460, 998, 386, "Text",ExpressionUUID->"374fab62-bfa1-4ff2-b971-67fc88f696b9"],
Cell[CellGroupData[{
Cell[66212, 1148, 180, 3, 116, "Subsection",ExpressionUUID->"9cf538fb-af97-48fe-ad68-731bdf6978e1"],
Cell[66395, 1153, 959, 16, 475, "Text",ExpressionUUID->"0fff7276-9c35-4743-8cf9-ecea0a685647"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67415, 1176, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"255749bb-8145-4bd2-8657-b7f7267d9a15",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[67562, 1182, 131, 3, 116, "Subsection",ExpressionUUID->"ea7f3496-12d7-4525-b71c-7b931d403c0e"],
Cell[67696, 1187, 213, 5, 91, "Text",ExpressionUUID->"07be8e18-f3ba-416f-aca9-e9274eddbb30"],
Cell[CellGroupData[{
Cell[67934, 1196, 227, 4, 105, "Subsubsection",ExpressionUUID->"58364ef3-517c-4dae-8001-5fc0a949b546"],
Cell[68164, 1202, 599, 20, 189, "Text",ExpressionUUID->"da78f3c7-d333-4ee3-bb2d-adf8d9a62c05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68800, 1227, 266, 4, 105, "Subsubsection",ExpressionUUID->"57d7f164-0fce-4036-a351-d4bed1d0a8f6"],
Cell[69069, 1233, 740, 17, 285, "Text",ExpressionUUID->"5be8f890-d755-414c-9a74-8daf70b20426"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69846, 1255, 212, 4, 69, "Subsubsection",ExpressionUUID->"b0e56dce-bb8e-46dd-9ed7-12c185bfff5a"],
Cell[70061, 1261, 484, 11, 188, "Text",ExpressionUUID->"3e56392e-b455-4d36-a051-b7576098482c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70582, 1277, 283, 5, 69, "Subsubsection",ExpressionUUID->"140c70d7-74ca-41e1-a48a-aea22cac157f"],
Cell[70868, 1284, 289, 7, 91, "Text",ExpressionUUID->"be3f7ce4-6b1c-4743-951a-f0f930911715"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[71218, 1298, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"cd52f003-0deb-43ea-9c10-f656f478e159",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[71365, 1304, 150, 3, 129, "Section",ExpressionUUID->"7488fecd-92a0-49f6-8929-b5f1d794dd63"],
Cell[71518, 1309, 1053, 15, 402, "Text",ExpressionUUID->"21773ef2-cada-41d2-a095-6ae00524d3df"],
Cell[72574, 1326, 8511, 217, 1071, "Code",ExpressionUUID->"c378db50-258d-4d0c-b73e-f676e34ad1de"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81134, 1549, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"06dc16af-fae6-44a2-a8a4-c8439072d273",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[81281, 1555, 155, 3, 116, "Subsection",ExpressionUUID->"05aca6fb-8928-47d8-99d9-183644e293f0"],
Cell[CellGroupData[{
Cell[81461, 1562, 227, 4, 69, "Subsubsection",ExpressionUUID->"cc63aa00-54f1-4095-8e69-917822232ccd"],
Cell[81691, 1568, 511, 11, 188, "Text",ExpressionUUID->"a02ac066-fa44-4d2b-ad69-ff42dbbf8900"],
Cell[82205, 1581, 2384, 56, 577, "Input",ExpressionUUID->"61731704-3e71-4657-8c60-b095170c2606"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84626, 1642, 224, 3, 69, "Subsubsection",ExpressionUUID->"5b8f605e-131f-4de0-8245-bded0c4c84a6"],
Cell[84853, 1647, 947, 21, 349, "Text",ExpressionUUID->"ac5b5c43-99d8-4d0d-be4a-367f5befc775"],
Cell[85803, 1670, 6223, 137, 1409, "Input",ExpressionUUID->"d62a594f-3e90-4bc6-a560-cbfd30872239"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92063, 1812, 227, 3, 69, "Subsubsection",ExpressionUUID->"0d024e23-eaf1-45b2-b176-f59827e1a875"],
Cell[92293, 1817, 375, 11, 93, "Text",ExpressionUUID->"542a0042-b24c-4923-935e-d7f79927aebb"],
Cell[92671, 1830, 959, 22, 289, "Input",ExpressionUUID->"1578f9f8-e991-413d-b197-583866d59dc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93667, 1857, 246, 4, 69, "Subsubsection",ExpressionUUID->"c8aec094-7dac-45cc-8b98-0e2cfd1d2f0a"],
Cell[93916, 1863, 285, 8, 60, "Text",ExpressionUUID->"78a10ab0-bc4b-41d6-9986-58098e05c80a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[94262, 1878, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"8b577f2d-f8b5-47ec-8921-1722b1cce606",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[94409, 1884, 317, 7, 114, "Subsection",ExpressionUUID->"6c915c2a-c232-4e3e-9ff3-92312c4ae203"],
Cell[94729, 1893, 319, 7, 123, "Text",ExpressionUUID->"d503f6bb-0eab-4d09-8c43-a25e9bfe0f4e"],
Cell[95051, 1902, 444, 9, 123, "Text",ExpressionUUID->"13c433e7-f4ab-4278-81f1-db3de2d50bc5"],
Cell[95498, 1913, 251, 5, 91, "Text",ExpressionUUID->"634fc050-2a70-4157-bfbc-c5289f546884"],
Cell[95752, 1920, 501, 9, 155, "Text",ExpressionUUID->"a029ef66-48d1-48bc-ab37-9ba5eb36c74d"],
Cell[96256, 1931, 677, 12, 187, "Text",ExpressionUUID->"5fb8dde1-1cd8-49d8-ab64-662837750119"],
Cell[96936, 1945, 306, 7, 91, "Text",ExpressionUUID->"6499baba-cef8-42fa-b2a6-8b7c834266f3"],
Cell[97245, 1954, 349, 7, 123, "Text",ExpressionUUID->"c734faee-d6a2-439b-8521-aaeb295e0684"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[97643, 1967, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"c25bcb14-bab6-4113-97c1-3ad380d2a6c3",
 CellTags->"SlideShowHeader"],
Cell[97768, 1971, 345, 8, 120, "Section",ExpressionUUID->"71689412-b40c-45c0-896a-619e63bbf5e8"],
Cell[CellGroupData[{
Cell[98138, 1983, 285, 5, 63, "Section",ExpressionUUID->"1db70143-f3d2-40cb-8c12-bfe9f726754a"],
Cell[98426, 1990, 39045, 806, 5537, "Input",ExpressionUUID->"2970f92e-260f-44a9-b3ae-337825b28dd7",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[137508, 2801, 151, 3, 129, "Section",ExpressionUUID->"8c67fb4e-ffff-48d6-9739-b841e576319c"],
Cell[137662, 2806, 16002, 318, 1297, "Input",ExpressionUUID->"e28d994e-fca5-4cda-bf5d-2e46bf9524d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153701, 3129, 214, 4, 129, "Section",ExpressionUUID->"1eb53d5c-8d6f-42d3-b83e-142f3844b5f0"],
Cell[CellGroupData[{
Cell[153940, 3137, 3472, 57, 145, "Input",ExpressionUUID->"3cf070ec-e991-4ae7-a357-e226f9f52451"],
Cell[157415, 3196, 1349, 27, 48, "Output",ExpressionUUID->"605db8f5-a4b3-44ef-96cf-257719d61567"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158801, 3228, 216, 4, 116, "Subsection",ExpressionUUID->"38fe7439-18e7-4b92-b19b-3a0f2f5e9815"],
Cell[CellGroupData[{
Cell[159042, 3236, 187, 3, 69, "Subsubsection",ExpressionUUID->"2d7ad44e-6057-4525-a401-cc8ff2a87edd"],
Cell[159232, 3241, 2682, 47, 209, "Input",ExpressionUUID->"6fd9f5f5-2051-43cb-9a9a-23ba79aac6a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161951, 3293, 276, 6, 105, "Subsubsection",ExpressionUUID->"a2d40206-3aeb-4498-a73d-1c42e1c00663"],
Cell[162230, 3301, 1308, 30, 145, "Input",ExpressionUUID->"1edfa738-f8ca-48b8-86d0-4aa7a2ecf20e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163575, 3336, 307, 7, 105, "Subsubsection",ExpressionUUID->"a44e64ae-f4f2-42c0-9dfd-c0c64575f09c"],
Cell[CellGroupData[{
Cell[163907, 3347, 1247, 30, 145, "Input",ExpressionUUID->"f58ef84e-8ed2-4e89-9e83-8775b9c73231"],
Cell[165157, 3379, 1712, 35, 157, "Output",ExpressionUUID->"6138ddc2-939e-4f9a-9bc9-cc61ca08697f"],
Cell[166872, 3416, 269, 7, 50, "Message",ExpressionUUID->"13829f09-dd7d-4d78-b374-9b8abd8f4593"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[167204, 3430, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"0adb5d48-db5d-496d-915d-6f23fe954e62",
 CellTags->"SlideShowHeader"]
}
]
*)

